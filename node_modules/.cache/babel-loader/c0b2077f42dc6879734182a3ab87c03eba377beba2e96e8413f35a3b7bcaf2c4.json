{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Extracts an area or multiple areas of an image, described in natural language.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Extract extends Action {\n  constructor(prompts) {\n    super();\n    this._prompts = [];\n    this._detectMultiple = false;\n    this._invert = false;\n    this._actionModel.actionType = \"extract\";\n    this._prompts = Array.isArray(prompts) ? prompts : [prompts];\n    this._actionModel.prompts = this._prompts;\n  }\n  detectMultiple() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._detectMultiple = value;\n    if (this._detectMultiple) {\n      this._actionModel.detectMultiple = this._detectMultiple;\n    }\n    return this;\n  }\n  mode(mode) {\n    this._mode = mode;\n    this._actionModel.mode = this._mode;\n    return this;\n  }\n  invert() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._invert = value;\n    if (this._invert) {\n      this._actionModel.invert = this._invert;\n    }\n    return this;\n  }\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue().setDelimiter(\";\");\n    if (this._prompts.length) {\n      qualifierValue.addValue(this.preparePromptValue());\n    }\n    if (this._detectMultiple) {\n      qualifierValue.addValue(\"multiple_true\");\n    }\n    if (this._mode) {\n      qualifierValue.addValue(\"mode_\".concat(this._mode));\n    }\n    if (this._invert) {\n      qualifierValue.addValue(\"invert_true\");\n    }\n    this.addQualifier(new Qualifier(\"e\", \"extract:\".concat(qualifierValue.toString())));\n  }\n  preparePromptValue() {\n    const prompts = this._prompts;\n    const qualifierValue = new QualifierValue().setDelimiter(\";\");\n    if (prompts.length === 1) {\n      qualifierValue.addValue(\"prompt_\".concat(prompts[0]));\n    } else {\n      qualifierValue.addValue(\"prompt_(\".concat(prompts.join(\";\"), \")\"));\n    }\n    return qualifierValue;\n  }\n  static fromJson(actionModel) {\n    const {\n      prompts,\n      detectMultiple,\n      mode,\n      invert\n    } = actionModel;\n    const result = new this(prompts);\n    if (detectMultiple) {\n      result.detectMultiple(detectMultiple);\n    }\n    if (mode) {\n      result.mode(mode);\n    }\n    if (invert) {\n      result.invert(invert);\n    }\n    return result;\n  }\n}\nexport { Extract };","map":{"version":3,"names":["Action","Qualifier","QualifierValue","Extract","constructor","prompts","_prompts","_detectMultiple","_invert","_actionModel","actionType","Array","isArray","detectMultiple","value","arguments","length","undefined","mode","_mode","invert","prepareQualifiers","qualifierValue","setDelimiter","addValue","preparePromptValue","concat","addQualifier","toString","join","fromJson","actionModel","result"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Extract.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Extracts an area or multiple areas of an image, described in natural language.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Extract extends Action {\n    constructor(prompts) {\n        super();\n        this._prompts = [];\n        this._detectMultiple = false;\n        this._invert = false;\n        this._actionModel.actionType = \"extract\";\n        this._prompts = Array.isArray(prompts) ? prompts : [prompts];\n        this._actionModel.prompts = this._prompts;\n    }\n    detectMultiple(value = false) {\n        this._detectMultiple = value;\n        if (this._detectMultiple) {\n            this._actionModel.detectMultiple = this._detectMultiple;\n        }\n        return this;\n    }\n    mode(mode) {\n        this._mode = mode;\n        this._actionModel.mode = this._mode;\n        return this;\n    }\n    invert(value = false) {\n        this._invert = value;\n        if (this._invert) {\n            this._actionModel.invert = this._invert;\n        }\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (this._prompts.length) {\n            qualifierValue.addValue(this.preparePromptValue());\n        }\n        if (this._detectMultiple) {\n            qualifierValue.addValue(\"multiple_true\");\n        }\n        if (this._mode) {\n            qualifierValue.addValue(`mode_${this._mode}`);\n        }\n        if (this._invert) {\n            qualifierValue.addValue(\"invert_true\");\n        }\n        this.addQualifier(new Qualifier(\"e\", `extract:${qualifierValue.toString()}`));\n    }\n    preparePromptValue() {\n        const prompts = this._prompts;\n        const qualifierValue = new QualifierValue().setDelimiter(\";\");\n        if (prompts.length === 1) {\n            qualifierValue.addValue(`prompt_${prompts[0]}`);\n        }\n        else {\n            qualifierValue.addValue(`prompt_(${prompts.join(\";\")})`);\n        }\n        return qualifierValue;\n    }\n    static fromJson(actionModel) {\n        const { prompts, detectMultiple, mode, invert } = actionModel;\n        const result = new this(prompts);\n        if (detectMultiple) {\n            result.detectMultiple(detectMultiple);\n        }\n        if (mode) {\n            result.mode(mode);\n        }\n        if (invert) {\n            result.invert(invert);\n        }\n        return result;\n    }\n}\nexport { Extract };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}