{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\n\n// This function gets a new phrase from GPT-4 based on the selected category\nexport const getPhrase = async category => {\n  try {\n    const systemPrompt = \"You are a game master for 'Legendary Lines'. Generate content for the \".concat(category, \" category.\");\n    const prompt = \"Generate a famous \".concat(category.toLowerCase(), \" quote or phrase that people might recognize. \\n    The response should be in this exact JSON format:\\n    {\\n      \\\"phrase\\\": \\\"the actual quote or phrase\\\",\\n      \\\"source\\\": \\\"where it's from\\\",\\n      \\\"year\\\": YYYY,\\n      \\\"hint\\\": \\\"a subtle hint without giving away the answer\\\"\\n    }\");\n    const completion = await openai.chat.completions.create({\n      messages: [{\n        role: \"system\",\n        content: systemPrompt\n      }, {\n        role: \"user\",\n        content: prompt\n      }],\n      model: \"gpt-4\",\n      temperature: 0.7 // Add some randomness to get varied responses\n    });\n    return JSON.parse(completion.choices[0].message.content);\n  } catch (error) {\n    console.error('Error fetching phrase:', error);\n    throw error;\n  }\n};\n\n// This function uses GPT-4 to check if the user's answer is correct\nexport const checkAnswer = async (userAnswer, correctAnswer, category) => {\n  try {\n    const systemPrompt = \"You are an answer validator for the 'Legendary Lines' game.\";\n    const prompt = \"Compare these answers for a \".concat(category, \" quote:\\n    User's answer: \\\"\").concat(userAnswer, \"\\\"\\n    Correct answer: \\\"\").concat(correctAnswer.source, \"\\\"\\n    \\n    Consider variations in naming and common abbreviations.\\n    Return a JSON response in this format:\\n    {\\n      \\\"isCorrect\\\": boolean,\\n      \\\"explanation\\\": \\\"brief explanation of why it's correct or incorrect\\\",\\n      \\\"similarity\\\": \\\"percentage of similarity\\\"\\n    }\");\n    const completion = await openai.chat.completions.create({\n      messages: [{\n        role: \"system\",\n        content: systemPrompt\n      }, {\n        role: \"user\",\n        content: prompt\n      }],\n      model: \"gpt-4\",\n      temperature: 0.1 // Lower temperature for more consistent validation\n    });\n    return JSON.parse(completion.choices[0].message.content);\n  } catch (error) {\n    console.error('Error checking answer:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","getPhrase","category","systemPrompt","concat","prompt","toLowerCase","completion","chat","completions","create","messages","role","content","model","temperature","JSON","parse","choices","message","error","console","checkAnswer","userAnswer","correctAnswer","source"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/aiService.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n});\n\n// This function gets a new phrase from GPT-4 based on the selected category\nexport const getPhrase = async (category) => {\n  try {\n    const systemPrompt = `You are a game master for 'Legendary Lines'. Generate content for the ${category} category.`;\n    \n    const prompt = `Generate a famous ${category.toLowerCase()} quote or phrase that people might recognize. \n    The response should be in this exact JSON format:\n    {\n      \"phrase\": \"the actual quote or phrase\",\n      \"source\": \"where it's from\",\n      \"year\": YYYY,\n      \"hint\": \"a subtle hint without giving away the answer\"\n    }`;\n    \n    const completion = await openai.chat.completions.create({\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: prompt }\n      ],\n      model: \"gpt-4\",\n      temperature: 0.7, // Add some randomness to get varied responses\n    });\n\n    return JSON.parse(completion.choices[0].message.content);\n  } catch (error) {\n    console.error('Error fetching phrase:', error);\n    throw error;\n  }\n};\n\n// This function uses GPT-4 to check if the user's answer is correct\nexport const checkAnswer = async (userAnswer, correctAnswer, category) => {\n  try {\n    const systemPrompt = `You are an answer validator for the 'Legendary Lines' game.`;\n    \n    const prompt = `Compare these answers for a ${category} quote:\n    User's answer: \"${userAnswer}\"\n    Correct answer: \"${correctAnswer.source}\"\n    \n    Consider variations in naming and common abbreviations.\n    Return a JSON response in this format:\n    {\n      \"isCorrect\": boolean,\n      \"explanation\": \"brief explanation of why it's correct or incorrect\",\n      \"similarity\": \"percentage of similarity\"\n    }`;\n\n    const completion = await openai.chat.completions.create({\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: prompt }\n      ],\n      model: \"gpt-4\",\n      temperature: 0.1, // Lower temperature for more consistent validation\n    });\n\n    return JSON.parse(completion.choices[0].message.content);\n  } catch (error) {\n    console.error('Error checking answer:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAQ,IAAK;EAC3C,IAAI;IACF,MAAMC,YAAY,4EAAAC,MAAA,CAA4EF,QAAQ,eAAY;IAElH,MAAMG,MAAM,wBAAAD,MAAA,CAAwBF,QAAQ,CAACI,WAAW,CAAC,CAAC,4SAOxD;IAEF,MAAMC,UAAU,GAAG,MAAMX,MAAM,CAACY,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACtDC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAEV;MAAa,CAAC,EACzC;QAAES,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAER;MAAO,CAAC,CAClC;MACDS,KAAK,EAAE,OAAO;MACdC,WAAW,EAAE,GAAG,CAAE;IACpB,CAAC,CAAC;IAEF,OAAOC,IAAI,CAACC,KAAK,CAACV,UAAU,CAACW,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,OAAO,CAAC;EAC1D,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOC,UAAU,EAAEC,aAAa,EAAEtB,QAAQ,KAAK;EACxE,IAAI;IACF,MAAMC,YAAY,gEAAgE;IAElF,MAAME,MAAM,kCAAAD,MAAA,CAAkCF,QAAQ,oCAAAE,MAAA,CACpCmB,UAAU,gCAAAnB,MAAA,CACToB,aAAa,CAACC,MAAM,uSAQrC;IAEF,MAAMlB,UAAU,GAAG,MAAMX,MAAM,CAACY,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACtDC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAEV;MAAa,CAAC,EACzC;QAAES,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAER;MAAO,CAAC,CAClC;MACDS,KAAK,EAAE,OAAO;MACdC,WAAW,EAAE,GAAG,CAAE;IACpB,CAAC,CAAC;IAEF,OAAOC,IAAI,CAACC,KAAK,CAACV,UAAU,CAACW,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACN,OAAO,CAAC;EAC1D,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}