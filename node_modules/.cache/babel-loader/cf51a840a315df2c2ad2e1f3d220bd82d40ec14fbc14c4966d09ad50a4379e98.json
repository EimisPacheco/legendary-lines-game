{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/MagicalQuestionCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    question = \"Default Question\"\n  } = _ref;\n  const [show, setShow] = useState(false);\n  const [particleGenerationKey, setParticleGenerationKey] = useState(0);\n  const [dustParticles, setDustParticles] = useState([]);\n  useEffect(() => {\n    if (question) {\n      setShow(true);\n      setTimeout(() => setShow(false), 5000);\n      setParticleGenerationKey(particleGenerationKey + 1); //Increment to trigger re-render\n    }\n  }, [question]);\n  useEffect(() => {\n    if (particleGenerationKey > 0) {\n      setDustParticles(generateDustParticles());\n    }\n  }, [particleGenerationKey]);\n  const generateDustParticles = () => {\n    const particles = [];\n    for (let i = 0; i < 80; i++) {\n      const size = Math.random() * 10 + 5;\n      const randomX = Math.random() * 200 - 50;\n      const randomY = Math.random() * 200 - 50;\n      const delay = Math.random() * 1.5;\n      particles.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dust-particle\",\n        style: {\n          left: \"\".concat(randomX, \"%\"),\n          top: \"\".concat(randomY, \"%\"),\n          width: \"\".concat(size, \"px\"),\n          height: \"\".concat(size, \"px\"),\n          animationDelay: \"\".concat(delay, \"s\")\n        }\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this));\n    }\n    return particles;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container \".concat(show ? \"show\" : \"\"),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dust-field\",\n        children: [\" \", dustParticles]\n      }, particleGenerationKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"question-text\",\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"E7mcikBFcVWY+AEu+v/+qEXCZTQ=\");\n_c = MagicalQuestionCard;\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MagicalQuestionCard","_ref","_s","question","show","setShow","particleGenerationKey","setParticleGenerationKey","dustParticles","setDustParticles","setTimeout","generateDustParticles","particles","i","size","Math","random","randomX","randomY","delay","push","className","style","left","concat","top","width","height","animationDelay","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../styles/MagicalQuestionCard.css\";\n\nconst MagicalQuestionCard = ({ question = \"Default Question\" }) => {\n  const [show, setShow] = useState(false);\n  const [particleGenerationKey, setParticleGenerationKey] = useState(0);\n  const [dustParticles, setDustParticles] = useState([]);\n\n  useEffect(() => {\n    if (question) {\n      setShow(true);\n      setTimeout(() => setShow(false), 5000);\n      setParticleGenerationKey(particleGenerationKey + 1); //Increment to trigger re-render\n    }\n  }, [question]);\n\n  useEffect(() => {\n    if (particleGenerationKey > 0) {\n        setDustParticles(generateDustParticles());\n    }\n  }, [particleGenerationKey]);\n\n  const generateDustParticles = () => {\n    const particles = [];\n    for (let i = 0; i < 80; i++) {\n      const size = Math.random() * 10 + 5;\n      const randomX = Math.random() * 200 - 50;\n      const randomY = Math.random() * 200 - 50;\n      const delay = Math.random() * 1.5;\n\n      particles.push(\n        <div\n          key={i}\n          className=\"dust-particle\"\n          style={{\n            left: `${randomX}%`,\n            top: `${randomY}%`,\n            width: `${size}px`,\n            height: `${size}px`,\n            animationDelay: `${delay}s`,\n          }}\n        ></div>\n      );\n    }\n    return particles;\n  };\n\n  return (\n    <div className=\"card-wrapper\">\n      <div className={`card-container ${show ? \"show\" : \"\"}`}>\n        <div className=\"dust-field\" key={particleGenerationKey}> {/* Key here! */}\n          {dustParticles}\n        </div>\n        <div className=\"card-content\">\n          <h2 className=\"question-text\">{question}</h2>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}