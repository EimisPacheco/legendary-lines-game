{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport '../styles/MagicalQuestionCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    message,\n    triggerEffect\n  } = _ref;\n  const cardRef = useRef(null);\n  useEffect(() => {\n    if (cardRef.current) {\n      // Clear any existing particles first\n      const existingWrappers = cardRef.current.querySelectorAll('.particles-wrapper');\n      existingWrappers.forEach(wrapper => wrapper.remove());\n\n      // Create new particles\n      createParticles(cardRef.current);\n    }\n  }, [message, triggerEffect]);\n  const createParticles = element => {\n    // Create particles wrapper\n    const particlesWrapper = document.createElement('div');\n    particlesWrapper.className = 'particles-wrapper';\n\n    // Get the card bounds\n    const cardBounds = element.getBoundingClientRect();\n    const width = cardBounds.width;\n    const height = cardBounds.height;\n\n    // Create particles grid\n    const gridSize = 50; // Number of rows/columns in the grid\n    const cellWidth = width / gridSize;\n    const cellHeight = height / gridSize;\n\n    // Create new particles\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        // Create particle with grid-based positioning\n        const particle = document.createElement('div');\n        particle.className = 'thanos-particle';\n\n        // Calculate base position in the grid\n        const baseX = col * cellWidth;\n        const baseY = row * cellHeight;\n\n        // Add some randomness to the position within the cell\n        const randomX = Math.random() * cellWidth;\n        const randomY = Math.random() * cellHeight;\n        const x = baseX + randomX;\n        const y = baseY + randomY;\n\n        // Vary particle sizes\n        const size = Math.random() * 4 + 2; // 2-6px\n        particle.style.width = \"\".concat(size, \"px\");\n        particle.style.height = \"\".concat(size, \"px\");\n\n        // Set final position\n        particle.style.left = \"\".concat(x, \"px\");\n        particle.style.top = \"\".concat(y, \"px\");\n\n        // Calculate starting positions in a circular pattern\n        const angle = Math.random() * Math.PI * 2;\n        const distance = Math.max(width, height); // Use the larger dimension\n        const startX = x + Math.cos(angle) * distance;\n        const startY = y + Math.sin(angle) * distance;\n        const tx = startX - x;\n        const ty = startY - y;\n        particle.style.setProperty('--tx', \"\".concat(tx, \"px\"));\n        particle.style.setProperty('--ty', \"\".concat(ty, \"px\"));\n\n        // Set dynamic opacity\n        const maxOpacity = 0.8 + Math.random() * 0.2; // 0.8-1.0\n        particle.style.setProperty('--max-opacity', maxOpacity);\n\n        // Staggered animation timing\n        const inDelay = Math.random() * 0.3;\n        const holdDelay = 1.2;\n        const outDelay = holdDelay + Math.random() * 0.3;\n        particle.style.animation = \"\\n          particleAnimationIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) \".concat(inDelay, \"s forwards,\\n          particleAnimationOut 0.8s cubic-bezier(0.4, 0, 0.2, 1) \").concat(outDelay, \"s forwards\\n        \");\n        particlesWrapper.appendChild(particle);\n      }\n    }\n\n    // Insert particles wrapper as the first child\n    element.insertBefore(particlesWrapper, element.firstChild);\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    const inputValue = event.target.elements.inputName.value; // Ensure this is correct\n    // Check if inputValue is being sent correctly\n    if (inputValue) {\n      // Send inputValue to the AI\n      sendToAI(inputValue);\n    } else {\n      console.error(\"Input value is empty\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(AnimatePresence, {\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      ref: cardRef,\n      className: \"magical-card\",\n      initial: {\n        opacity: 0,\n        scale: 0.8\n      },\n      animate: {\n        opacity: 1,\n        scale: 1\n      },\n      transition: {\n        duration: 0.5\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: message || \"Waiting for the game to begin...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, triggerEffect, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"6u/bLyT0WzEP0A9aknmDXb+lDH8=\");\n_c = MagicalQuestionCard;\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useEffect","useRef","motion","AnimatePresence","jsxDEV","_jsxDEV","MagicalQuestionCard","_ref","_s","message","triggerEffect","cardRef","current","existingWrappers","querySelectorAll","forEach","wrapper","remove","createParticles","element","particlesWrapper","document","createElement","className","cardBounds","getBoundingClientRect","width","height","gridSize","cellWidth","cellHeight","row","col","particle","baseX","baseY","randomX","Math","random","randomY","x","y","size","style","concat","left","top","angle","PI","distance","max","startX","cos","startY","sin","tx","ty","setProperty","maxOpacity","inDelay","holdDelay","outDelay","animation","appendChild","insertBefore","firstChild","handleSubmit","event","preventDefault","inputValue","target","elements","inputName","value","sendToAI","console","error","children","div","ref","initial","opacity","scale","animate","transition","duration","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport '../styles/MagicalQuestionCard.css';\n\nconst MagicalQuestionCard = ({ message, triggerEffect }) => {\n  const cardRef = useRef(null);\n\n  useEffect(() => {\n    if (cardRef.current) {\n      // Clear any existing particles first\n      const existingWrappers = cardRef.current.querySelectorAll('.particles-wrapper');\n      existingWrappers.forEach(wrapper => wrapper.remove());\n      \n      // Create new particles\n      createParticles(cardRef.current);\n    }\n  }, [message, triggerEffect]);\n\n  const createParticles = (element) => {\n    // Create particles wrapper\n    const particlesWrapper = document.createElement('div');\n    particlesWrapper.className = 'particles-wrapper';\n    \n    // Get the card bounds\n    const cardBounds = element.getBoundingClientRect();\n    const width = cardBounds.width;\n    const height = cardBounds.height;\n    \n    // Create particles grid\n    const gridSize = 50; // Number of rows/columns in the grid\n    const cellWidth = width / gridSize;\n    const cellHeight = height / gridSize;\n    \n    // Create new particles\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        // Create particle with grid-based positioning\n        const particle = document.createElement('div');\n        particle.className = 'thanos-particle';\n        \n        // Calculate base position in the grid\n        const baseX = col * cellWidth;\n        const baseY = row * cellHeight;\n        \n        // Add some randomness to the position within the cell\n        const randomX = Math.random() * cellWidth;\n        const randomY = Math.random() * cellHeight;\n        \n        const x = baseX + randomX;\n        const y = baseY + randomY;\n        \n        // Vary particle sizes\n        const size = Math.random() * 4 + 2; // 2-6px\n        particle.style.width = `${size}px`;\n        particle.style.height = `${size}px`;\n        \n        // Set final position\n        particle.style.left = `${x}px`;\n        particle.style.top = `${y}px`;\n        \n        // Calculate starting positions in a circular pattern\n        const angle = Math.random() * Math.PI * 2;\n        const distance = Math.max(width, height); // Use the larger dimension\n        const startX = x + Math.cos(angle) * distance;\n        const startY = y + Math.sin(angle) * distance;\n        \n        const tx = startX - x;\n        const ty = startY - y;\n        \n        particle.style.setProperty('--tx', `${tx}px`);\n        particle.style.setProperty('--ty', `${ty}px`);\n        \n        // Set dynamic opacity\n        const maxOpacity = 0.8 + Math.random() * 0.2; // 0.8-1.0\n        particle.style.setProperty('--max-opacity', maxOpacity);\n        \n        // Staggered animation timing\n        const inDelay = Math.random() * 0.3;\n        const holdDelay = 1.2;\n        const outDelay = holdDelay + Math.random() * 0.3;\n        \n        particle.style.animation = `\n          particleAnimationIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) ${inDelay}s forwards,\n          particleAnimationOut 0.8s cubic-bezier(0.4, 0, 0.2, 1) ${outDelay}s forwards\n        `;\n        \n        particlesWrapper.appendChild(particle);\n      }\n    }\n\n    // Insert particles wrapper as the first child\n    element.insertBefore(particlesWrapper, element.firstChild);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const inputValue = event.target.elements.inputName.value; // Ensure this is correct\n    // Check if inputValue is being sent correctly\n    if (inputValue) {\n        // Send inputValue to the AI\n        sendToAI(inputValue);\n    } else {\n        console.error(\"Input value is empty\");\n    }\n  }\n\n  return (\n    <AnimatePresence>\n      <motion.div \n        ref={cardRef}\n        className=\"magical-card\"\n        key={triggerEffect}\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"card-content\">\n          {message || \"Waiting for the game to begin...\"}\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}