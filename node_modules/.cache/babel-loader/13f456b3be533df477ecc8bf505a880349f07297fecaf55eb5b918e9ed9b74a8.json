{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Added for development\n});\nconst DIFFICULTY_MODIFIERS = {\n  EASY: {\n    popularity: \"well-known\",\n    description: \"commonly recognized phrases\",\n    temperature: 0.7\n  },\n  MEDIUM: {\n    popularity: \"moderately known\",\n    description: \"somewhat challenging phrases\",\n    temperature: 0.8\n  },\n  HARD: {\n    popularity: \"obscure\",\n    description: \"rare and challenging phrases\",\n    temperature: 0.9\n  }\n};\nexport const getPhrase = async function (category) {\n  let difficulty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MEDIUM';\n  const difficultyConfig = DIFFICULTY_MODIFIERS[difficulty];\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: \"You are a game master for 'Legendary Lines'. Generate \".concat(difficultyConfig.popularity, \" content for the \").concat(category, \" category. Focus on \").concat(difficultyConfig.description, \".\")\n      }, {\n        role: \"user\",\n        content: \"Generate a \".concat(difficulty.toLowerCase(), \" difficulty \").concat(category.toLowerCase(), \" phrase.\")\n      }],\n      functions: [{\n        name: \"generatePhrase\",\n        description: \"Generate a phrase or quote for the game based on category and difficulty\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            phrase: {\n              type: \"string\",\n              description: \"The actual quote or phrase to be guessed\"\n            },\n            source: {\n              type: \"string\",\n              description: \"The origin of the phrase (book title, movie name, etc.)\"\n            },\n            year: {\n              type: \"number\",\n              description: \"The year the source was released/published\"\n            },\n            hint: {\n              type: \"string\",\n              description: \"A subtle hint without giving away the answer\"\n            },\n            additionalInfo: {\n              type: \"object\",\n              properties: {\n                creator: {\n                  type: \"string\",\n                  description: \"Director (for movies) or Artist/Band (for songs)\"\n                },\n                genre: {\n                  type: \"string\",\n                  description: \"The genre of the source material\"\n                }\n              }\n            }\n          },\n          required: [\"phrase\", \"source\", \"year\", \"hint\"]\n        }\n      }],\n      function_call: {\n        name: \"generatePhrase\"\n      }\n    });\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error generating phrase:', error);\n    throw error;\n  }\n};\nexport const checkAnswer = async function (playerAnswer, correctAnswer) {\n  let answerType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'source';\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: \"You are validating answers for the Legendary Lines game.\"\n      }, {\n        role: \"user\",\n        content: \"Compare the player's \".concat(answerType, \" answer: \\\"\").concat(playerAnswer, \"\\\" with the correct \").concat(answerType, \": \\\"\").concat(correctAnswer, \"\\\"\")\n      }],\n      functions: [{\n        name: \"validateAnswer\",\n        description: \"Validate player's answer against the correct source\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            isCorrect: {\n              type: \"boolean\",\n              description: \"Whether the answer is correct\"\n            },\n            similarity: {\n              type: \"number\",\n              description: \"How close the answer is to the correct one (0-1)\"\n            },\n            feedback: {\n              type: \"string\",\n              description: \"Helpful feedback about why the answer was right or wrong\"\n            }\n          },\n          required: [\"isCorrect\", \"feedback\"]\n        }\n      }],\n      function_call: {\n        name: \"validateAnswer\"\n      }\n    });\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","DIFFICULTY_MODIFIERS","EASY","popularity","description","temperature","MEDIUM","HARD","getPhrase","category","difficulty","arguments","length","undefined","difficultyConfig","completion","chat","completions","create","model","messages","role","content","concat","toLowerCase","functions","name","parameters","type","properties","phrase","source","year","hint","additionalInfo","creator","genre","required","function_call","functionCall","choices","message","JSON","parse","error","console","checkAnswer","playerAnswer","correctAnswer","answerType","isCorrect","similarity","feedback"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/aiService.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true  // Added for development\n});\n\nconst DIFFICULTY_MODIFIERS = {\n  EASY: {\n    popularity: \"well-known\",\n    description: \"commonly recognized phrases\",\n    temperature: 0.7\n  },\n  MEDIUM: {\n    popularity: \"moderately known\",\n    description: \"somewhat challenging phrases\",\n    temperature: 0.8\n  },\n  HARD: {\n    popularity: \"obscure\",\n    description: \"rare and challenging phrases\",\n    temperature: 0.9\n  }\n};\n\nexport const getPhrase = async (category, difficulty = 'MEDIUM') => {\n  const difficultyConfig = DIFFICULTY_MODIFIERS[difficulty];\n  \n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a game master for 'Legendary Lines'. Generate ${difficultyConfig.popularity} content for the ${category} category. Focus on ${difficultyConfig.description}.`\n        },\n        {\n          role: \"user\",\n          content: `Generate a ${difficulty.toLowerCase()} difficulty ${category.toLowerCase()} phrase.`\n        }\n      ],\n      functions: [{\n        name: \"generatePhrase\",\n        description: \"Generate a phrase or quote for the game based on category and difficulty\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            phrase: {\n              type: \"string\",\n              description: \"The actual quote or phrase to be guessed\"\n            },\n            source: {\n              type: \"string\",\n              description: \"The origin of the phrase (book title, movie name, etc.)\"\n            },\n            year: {\n              type: \"number\",\n              description: \"The year the source was released/published\"\n            },\n            hint: {\n              type: \"string\",\n              description: \"A subtle hint without giving away the answer\"\n            },\n            additionalInfo: {\n              type: \"object\",\n              properties: {\n                creator: {\n                  type: \"string\",\n                  description: \"Director (for movies) or Artist/Band (for songs)\"\n                },\n                genre: {\n                  type: \"string\",\n                  description: \"The genre of the source material\"\n                }\n              }\n            }\n          },\n          required: [\"phrase\", \"source\", \"year\", \"hint\"]\n        }\n      }],\n      function_call: { name: \"generatePhrase\" }\n    });\n\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error generating phrase:', error);\n    throw error;\n  }\n};\n\nexport const checkAnswer = async (playerAnswer, correctAnswer, answerType = 'source') => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are validating answers for the Legendary Lines game.\"\n        },\n        {\n          role: \"user\",\n          content: `Compare the player's ${answerType} answer: \"${playerAnswer}\" with the correct ${answerType}: \"${correctAnswer}\"`\n        }\n      ],\n      functions: [{\n        name: \"validateAnswer\",\n        description: \"Validate player's answer against the correct source\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            isCorrect: {\n              type: \"boolean\",\n              description: \"Whether the answer is correct\"\n            },\n            similarity: {\n              type: \"number\",\n              description: \"How close the answer is to the correct one (0-1)\"\n            },\n            feedback: {\n              type: \"string\",\n              description: \"Helpful feedback about why the answer was right or wrong\"\n            }\n          },\n          required: [\"isCorrect\", \"feedback\"]\n        }\n      }],\n      function_call: { name: \"validateAnswer\" }\n    });\n\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error validating answer:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}