{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport PropTypes from 'prop-types';\nimport \"../styles/MagicalQuestionCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    question = \"Default Question\",\n    triggerEffect\n  } = _ref;\n  const [particles, setParticles] = useState([]);\n  const [isIntegrating, setIsIntegrating] = useState(true);\n  const generateParticles = useCallback(() => {\n    const particlesArray = [];\n    const cardWidth = 600;\n    const cardHeight = 300;\n\n    // Increase density for more realistic effect\n    const columns = 60;\n    const rows = 30;\n    const cellWidth = cardWidth / columns;\n    const cellHeight = cardHeight / rows;\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < rows; j++) {\n        // Calculate base position\n        const baseX = i / columns * cardWidth;\n        const baseY = j / rows * cardHeight;\n\n        // Create multiple particles per cell\n        const particlesPerCell = 2;\n        for (let k = 0; k < particlesPerCell; k++) {\n          // Add slight randomness to initial position\n          const randomOffsetX = Math.random() * cellWidth * 0.8;\n          const randomOffsetY = Math.random() * cellHeight * 0.8;\n          particlesArray.push({\n            id: \"particle-\".concat(i, \"-\").concat(j, \"-\").concat(k),\n            // Initial position forms the card shape\n            initialX: baseX + randomOffsetX,\n            initialY: baseY + randomOffsetY,\n            // Final position creates the disintegration effect\n            finalX: baseX + (Math.random() - 0.5) * cardWidth * 1.5,\n            finalY: baseY - Math.random() * cardHeight * 2,\n            // Upward bias\n            size: Math.random() * 2 + 1,\n            // Delay based on position for sequential effect\n            delay: j / rows * 0.8 + Math.random() * 0.3,\n            opacity: Math.random() * 0.5 + 0.5,\n            rotation: Math.random() * 360\n          });\n        }\n      }\n    }\n    return particlesArray;\n  }, []);\n  useEffect(() => {\n    // Reset state for new animation\n    setIsIntegrating(true);\n    const newParticles = generateParticles();\n    setParticles(newParticles);\n\n    // Allow time for integration before starting disintegration\n    const timer = setTimeout(() => {\n      setIsIntegrating(false);\n    }, 2500);\n    return () => clearTimeout(timer);\n  }, [triggerEffect, generateParticles]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"card-content\",\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        exit: {\n          opacity: 0\n        },\n        transition: {\n          duration: 0.5\n        },\n        children: /*#__PURE__*/_jsxDEV(motion.h2, {\n          className: \"question-text\",\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          transition: {\n            delay: 1.2\n          },\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"particles-wrapper\",\n        children: particles.map(particle => /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"thanos-particle\",\n          initial: {\n            x: isIntegrating ? particle.finalX : particle.initialX,\n            y: isIntegrating ? particle.finalY : particle.initialY,\n            opacity: 0,\n            scale: 0,\n            rotate: particle.rotation\n          },\n          animate: {\n            x: isIntegrating ? particle.initialX : particle.finalX,\n            y: isIntegrating ? particle.initialY : particle.finalY,\n            opacity: isIntegrating ? particle.opacity : 0,\n            scale: isIntegrating ? 1 : 0,\n            rotate: isIntegrating ? 0 : particle.rotation\n          },\n          transition: {\n            duration: 1.8,\n            delay: particle.delay,\n            ease: [0.23, 1, 0.32, 1]\n          },\n          style: {\n            width: \"\".concat(particle.size, \"px\"),\n            height: \"\".concat(particle.size, \"px\"),\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            transform: \"translate(\".concat(particle.initialX, \"px, \").concat(particle.initialY, \"px)\")\n          }\n        }, particle.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"iy5NZ5YKi+/2hlmK/ITMxkADTS8=\");\n_c = MagicalQuestionCard;\nMagicalQuestionCard.propTypes = {\n  question: PropTypes.string,\n  triggerEffect: PropTypes.number\n};\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","motion","AnimatePresence","PropTypes","jsxDEV","_jsxDEV","MagicalQuestionCard","_ref","_s","question","triggerEffect","particles","setParticles","isIntegrating","setIsIntegrating","generateParticles","particlesArray","cardWidth","cardHeight","columns","rows","cellWidth","cellHeight","i","j","baseX","baseY","particlesPerCell","k","randomOffsetX","Math","random","randomOffsetY","push","id","concat","initialX","initialY","finalX","finalY","size","delay","opacity","rotation","newParticles","timer","setTimeout","clearTimeout","className","children","div","initial","animate","exit","transition","duration","h2","fileName","_jsxFileName","lineNumber","columnNumber","map","particle","x","y","scale","rotate","ease","style","width","height","position","left","top","transform","_c","propTypes","string","number","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport PropTypes from 'prop-types';\nimport \"../styles/MagicalQuestionCard.css\";\n\nconst MagicalQuestionCard = ({ question = \"Default Question\", triggerEffect }) => {\n  const [particles, setParticles] = useState([]);\n  const [isIntegrating, setIsIntegrating] = useState(true);\n\n  const generateParticles = useCallback(() => {\n    const particlesArray = [];\n    const cardWidth = 600;\n    const cardHeight = 300;\n    \n    // Increase density for more realistic effect\n    const columns = 60;\n    const rows = 30;\n    const cellWidth = cardWidth / columns;\n    const cellHeight = cardHeight / rows;\n\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < rows; j++) {\n        // Calculate base position\n        const baseX = (i / columns) * cardWidth;\n        const baseY = (j / rows) * cardHeight;\n        \n        // Create multiple particles per cell\n        const particlesPerCell = 2;\n        for (let k = 0; k < particlesPerCell; k++) {\n          // Add slight randomness to initial position\n          const randomOffsetX = Math.random() * cellWidth * 0.8;\n          const randomOffsetY = Math.random() * cellHeight * 0.8;\n\n          particlesArray.push({\n            id: `particle-${i}-${j}-${k}`,\n            // Initial position forms the card shape\n            initialX: baseX + randomOffsetX,\n            initialY: baseY + randomOffsetY,\n            // Final position creates the disintegration effect\n            finalX: baseX + (Math.random() - 0.5) * cardWidth * 1.5,\n            finalY: baseY - Math.random() * cardHeight * 2, // Upward bias\n            size: Math.random() * 2 + 1,\n            // Delay based on position for sequential effect\n            delay: (j / rows) * 0.8 + Math.random() * 0.3,\n            opacity: Math.random() * 0.5 + 0.5,\n            rotation: Math.random() * 360\n          });\n        }\n      }\n    }\n    return particlesArray;\n  }, []);\n\n  useEffect(() => {\n    // Reset state for new animation\n    setIsIntegrating(true);\n    const newParticles = generateParticles();\n    setParticles(newParticles);\n\n    // Allow time for integration before starting disintegration\n    const timer = setTimeout(() => {\n      setIsIntegrating(false);\n    }, 2500);\n\n    return () => clearTimeout(timer);\n  }, [triggerEffect, generateParticles]);\n\n  return (\n    <div className=\"card-container\">\n      <div className=\"card-wrapper\">\n        <motion.div \n          className=\"card-content\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <motion.h2 \n            className=\"question-text\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1.2 }}\n          >\n            {question}\n          </motion.h2>\n        </motion.div>\n\n        <div className=\"particles-wrapper\">\n          {particles.map((particle) => (\n            <motion.div\n              key={particle.id}\n              className=\"thanos-particle\"\n              initial={{\n                x: isIntegrating ? particle.finalX : particle.initialX,\n                y: isIntegrating ? particle.finalY : particle.initialY,\n                opacity: 0,\n                scale: 0,\n                rotate: particle.rotation\n              }}\n              animate={{\n                x: isIntegrating ? particle.initialX : particle.finalX,\n                y: isIntegrating ? particle.initialY : particle.finalY,\n                opacity: isIntegrating ? particle.opacity : 0,\n                scale: isIntegrating ? 1 : 0,\n                rotate: isIntegrating ? 0 : particle.rotation\n              }}\n              transition={{\n                duration: 1.8,\n                delay: particle.delay,\n                ease: [0.23, 1, 0.32, 1]\n              }}\n              style={{\n                width: `${particle.size}px`,\n                height: `${particle.size}px`,\n                position: 'absolute',\n                left: 0,\n                top: 0,\n                transform: `translate(${particle.initialX}px, ${particle.initialY}px)`\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMagicalQuestionCard.propTypes = {\n  question: PropTypes.string,\n  triggerEffect: PropTypes.number\n};\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}