{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MagicalQuestionCard from './MagicalQuestionCard';\nimport AnswerModal from './AnswerModal';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport '../styles/Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CATEGORIES = {\n  SONG: {\n    name: 'Song',\n    points: 1\n  },\n  MOVIE: {\n    name: 'Movie',\n    points: 2\n  },\n  FAMOUS_PERSON: {\n    name: 'Famous Person',\n    points: 3\n  },\n  FICTIONAL_CHARACTER: {\n    name: 'Fictional Character',\n    points: 3\n  },\n  BOOK: {\n    name: 'Book',\n    points: 4\n  },\n  POET: {\n    name: 'Poet',\n    points: 5\n  },\n  QUOTE: {\n    name: 'Quote',\n    points: 6\n  }\n};\nconst Game = _ref => {\n  _s();\n  let {\n    difficulty,\n    numberOfRounds\n  } = _ref;\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [round, setRound] = useState(1);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  // Modal states\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [currentQuestionType, setCurrentQuestionType] = useState('source');\n  // Store complete phrase data\n  const [phraseData, setPhraseData] = useState(null);\n\n  // Only fetch new phrase when category is selected\n  const fetchNewPhrase = async () => {\n    if (!selectedCategory) return; // Don't fetch if no category is selected\n\n    try {\n      const data = await getPhrase(selectedCategory, difficulty);\n      setPhraseData(data);\n      setCurrentPhrase(data.phrase);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n    }\n  };\n\n  // Remove initial useEffect that fetches phrase\n  // Instead, fetch phrase when category is selected\n  const handleCategorySelect = async category => {\n    setSelectedCategory(category);\n    setTriggerEffect(prev => prev + 1);\n    try {\n      const data = await getPhrase(category, difficulty);\n      setPhraseData(data);\n      setCurrentPhrase(data.phrase);\n      setCurrentQuestionType('source');\n      setShowAnswerModal(true);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n    }\n  };\n  const handleModalSubmit = async answer => {\n    try {\n      var _phraseData$additiona2;\n      let validationResult;\n      let points = CATEGORIES[selectedCategory].points;\n      if (currentQuestionType === 'source') {\n        validationResult = await checkAnswer(answer, phraseData.source, 'source');\n        if (validationResult.isCorrect) {\n          setCurrentQuestionType('year');\n          setShowAnswerModal(true);\n          setShowResult({\n            type: 'correct',\n            message: validationResult.feedback\n          });\n        } else {\n          setStreak(0);\n          setShowResult({\n            type: 'wrong',\n            message: validationResult.feedback\n          });\n          setShowAnswerModal(false);\n        }\n      } else if (currentQuestionType === 'year') {\n        validationResult = await checkAnswer(answer, phraseData.year.toString(), 'year');\n        if (validationResult.isCorrect) {\n          var _phraseData$additiona;\n          points *= 2; // Double points for correct year\n\n          // Check if we should offer triple points challenge\n          if ((selectedCategory === 'MOVIE' || selectedCategory === 'SONG') && (_phraseData$additiona = phraseData.additionalInfo) !== null && _phraseData$additiona !== void 0 && _phraseData$additiona.creator) {\n            setCurrentQuestionType('creator');\n            setShowAnswerModal(true);\n            setShowResult({\n              type: 'correct',\n              message: 'Year correct! Try for triple points?'\n            });\n            return;\n          }\n        } else {\n          points = 0; // Lose points for wrong year\n          setShowResult({\n            type: 'wrong',\n            message: validationResult.feedback\n          });\n        }\n      } else if (currentQuestionType === 'creator') {\n        validationResult = await checkAnswer(answer, phraseData.additionalInfo.creator, 'creator');\n        if (validationResult.isCorrect) {\n          points *= 3; // Triple points for correct creator\n        } else {\n          points = 0; // Lose points for wrong creator\n        }\n      }\n\n      // Apply difficulty multiplier\n      if (difficulty === 'MEDIUM') points *= 1.5;else if (difficulty === 'HARD') points *= 2;\n\n      // Update score if points were earned\n      if (points > 0) {\n        setScore(prev => prev + points);\n        setStreak(prev => prev + 1);\n      }\n\n      // Move to next round if not in creator phase or creator phase is complete\n      if (currentQuestionType !== 'source' && (currentQuestionType !== 'year' || !validationResult.isCorrect) && (currentQuestionType !== 'creator' || !((_phraseData$additiona2 = phraseData.additionalInfo) !== null && _phraseData$additiona2 !== void 0 && _phraseData$additiona2.creator))) {\n        if (round < numberOfRounds) {\n          setRound(prev => prev + 1);\n          setSelectedCategory(null);\n          setCurrentQuestionType('source');\n          await fetchNewPhrase();\n        } else {\n          setShowResult({\n            type: 'gameOver',\n            message: \"Game Over! Final score: \".concat(score)\n          });\n        }\n        setShowAnswerModal(false);\n      }\n    } catch (error) {\n      console.error('Error processing answer:', error);\n      setShowResult({\n        type: 'error',\n        message: 'Error processing answer'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Round: \", round, \"/\", numberOfRounds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Streak: \", streak]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MagicalQuestionCard, {\n      phrase: currentPhrase,\n      triggerEffect: triggerEffect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Category:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-buttons\",\n        children: Object.entries(CATEGORIES).map(_ref2 => {\n          let [key, value] = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"category-btn \".concat(selectedCategory === key ? 'selected' : ''),\n            onClick: () => handleCategorySelect(key),\n            children: [value.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"points\",\n              children: [\"(\", value.points, \" pts)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), showResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-message \".concat(showResult.type),\n      children: showResult.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AnswerModal, {\n      isOpen: showAnswerModal,\n      onClose: () => setShowAnswerModal(false),\n      onSubmit: handleModalSubmit,\n      questionType: currentQuestionType,\n      currentPhrase: currentPhrase\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"H4LmhjYCcbRGICbLct/XkKRhMtQ=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","MagicalQuestionCard","AnswerModal","getPhrase","checkAnswer","jsxDEV","_jsxDEV","CATEGORIES","SONG","name","points","MOVIE","FAMOUS_PERSON","FICTIONAL_CHARACTER","BOOK","POET","QUOTE","Game","_ref","_s","difficulty","numberOfRounds","currentPhrase","setCurrentPhrase","selectedCategory","setSelectedCategory","score","setScore","streak","setStreak","round","setRound","triggerEffect","setTriggerEffect","showResult","setShowResult","showAnswerModal","setShowAnswerModal","currentQuestionType","setCurrentQuestionType","phraseData","setPhraseData","fetchNewPhrase","data","phrase","error","console","handleCategorySelect","category","prev","handleModalSubmit","answer","_phraseData$additiona2","validationResult","source","isCorrect","type","message","feedback","year","toString","_phraseData$additiona","additionalInfo","creator","concat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","_ref2","key","value","onClick","isOpen","onClose","onSubmit","questionType","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MagicalQuestionCard from './MagicalQuestionCard';\nimport AnswerModal from './AnswerModal';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport '../styles/Game.css';\n\nconst CATEGORIES = {\n  SONG: { name: 'Song', points: 1 },\n  MOVIE: { name: 'Movie', points: 2 },\n  FAMOUS_PERSON: { name: 'Famous Person', points: 3 },\n  FICTIONAL_CHARACTER: { name: 'Fictional Character', points: 3 },\n  BOOK: { name: 'Book', points: 4 },\n  POET: { name: 'Poet', points: 5 },\n  QUOTE: { name: 'Quote', points: 6 }\n};\n\nconst Game = ({ difficulty, numberOfRounds }) => {\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [round, setRound] = useState(1);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  // Modal states\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [currentQuestionType, setCurrentQuestionType] = useState('source');\n  // Store complete phrase data\n  const [phraseData, setPhraseData] = useState(null);\n\n  // Only fetch new phrase when category is selected\n  const fetchNewPhrase = async () => {\n    if (!selectedCategory) return; // Don't fetch if no category is selected\n\n    try {\n      const data = await getPhrase(selectedCategory, difficulty);\n      setPhraseData(data);\n      setCurrentPhrase(data.phrase);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n    }\n  };\n\n  // Remove initial useEffect that fetches phrase\n  // Instead, fetch phrase when category is selected\n  const handleCategorySelect = async (category) => {\n    setSelectedCategory(category);\n    setTriggerEffect(prev => prev + 1);\n    try {\n      const data = await getPhrase(category, difficulty);\n      setPhraseData(data);\n      setCurrentPhrase(data.phrase);\n      setCurrentQuestionType('source');\n      setShowAnswerModal(true);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n    }\n  };\n\n  const handleModalSubmit = async (answer) => {\n    try {\n      let validationResult;\n      let points = CATEGORIES[selectedCategory].points;\n\n      if (currentQuestionType === 'source') {\n        validationResult = await checkAnswer(answer, phraseData.source, 'source');\n        \n        if (validationResult.isCorrect) {\n          setCurrentQuestionType('year');\n          setShowAnswerModal(true);\n          setShowResult({ type: 'correct', message: validationResult.feedback });\n        } else {\n          setStreak(0);\n          setShowResult({ type: 'wrong', message: validationResult.feedback });\n          setShowAnswerModal(false);\n        }\n\n      } else if (currentQuestionType === 'year') {\n        validationResult = await checkAnswer(answer, phraseData.year.toString(), 'year');\n        \n        if (validationResult.isCorrect) {\n          points *= 2; // Double points for correct year\n\n          // Check if we should offer triple points challenge\n          if ((selectedCategory === 'MOVIE' || selectedCategory === 'SONG') && phraseData.additionalInfo?.creator) {\n            setCurrentQuestionType('creator');\n            setShowAnswerModal(true);\n            setShowResult({ type: 'correct', message: 'Year correct! Try for triple points?' });\n            return;\n          }\n        } else {\n          points = 0; // Lose points for wrong year\n          setShowResult({ type: 'wrong', message: validationResult.feedback });\n        }\n\n      } else if (currentQuestionType === 'creator') {\n        validationResult = await checkAnswer(answer, phraseData.additionalInfo.creator, 'creator');\n        \n        if (validationResult.isCorrect) {\n          points *= 3; // Triple points for correct creator\n        } else {\n          points = 0; // Lose points for wrong creator\n        }\n      }\n\n      // Apply difficulty multiplier\n      if (difficulty === 'MEDIUM') points *= 1.5;\n      else if (difficulty === 'HARD') points *= 2;\n\n      // Update score if points were earned\n      if (points > 0) {\n        setScore(prev => prev + points);\n        setStreak(prev => prev + 1);\n      }\n\n      // Move to next round if not in creator phase or creator phase is complete\n      if (currentQuestionType !== 'source' && \n          (currentQuestionType !== 'year' || !validationResult.isCorrect) && \n          (currentQuestionType !== 'creator' || !phraseData.additionalInfo?.creator)) {\n        if (round < numberOfRounds) {\n          setRound(prev => prev + 1);\n          setSelectedCategory(null);\n          setCurrentQuestionType('source');\n          await fetchNewPhrase();\n        } else {\n          setShowResult({ type: 'gameOver', message: `Game Over! Final score: ${score}` });\n        }\n        setShowAnswerModal(false);\n      }\n\n    } catch (error) {\n      console.error('Error processing answer:', error);\n      setShowResult({ type: 'error', message: 'Error processing answer' });\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <div>Round: {round}/{numberOfRounds}</div>\n        <div>Score: {score}</div>\n        <div>Streak: {streak}</div>\n      </div>\n\n      <MagicalQuestionCard \n        phrase={currentPhrase}\n        triggerEffect={triggerEffect}\n      />\n\n      <div className=\"category-selector\">\n        <h3>Select Category:</h3>\n        <div className=\"category-buttons\">\n          {Object.entries(CATEGORIES).map(([key, value]) => (\n            <button\n              key={key}\n              className={`category-btn ${selectedCategory === key ? 'selected' : ''}`}\n              onClick={() => handleCategorySelect(key)}\n            >\n              {value.name}\n              <span className=\"points\">({value.points} pts)</span>\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {showResult && (\n        <div className={`result-message ${showResult.type}`}>\n          {showResult.message}\n        </div>\n      )}\n\n      <AnswerModal \n        isOpen={showAnswerModal}\n        onClose={() => setShowAnswerModal(false)}\n        onSubmit={handleModalSubmit}\n        questionType={currentQuestionType}\n        currentPhrase={currentPhrase}\n      />\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}