{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport '../styles/MagicalQuestionCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    message,\n    triggerEffect\n  } = _ref;\n  const cardRef = useRef(null);\n  useEffect(() => {\n    if (cardRef.current) {\n      createParticles(cardRef.current);\n    }\n  }, [message, triggerEffect]);\n  const createParticles = element => {\n    // Clear existing particles\n    const existingWrapper = element.querySelector('.particles-wrapper');\n    if (existingWrapper) {\n      existingWrapper.remove();\n    }\n\n    // Create particles wrapper\n    const particlesWrapper = document.createElement('div');\n    particlesWrapper.className = 'particles-wrapper';\n\n    // Get the card bounds\n    const cardBounds = element.getBoundingClientRect();\n    const width = cardBounds.width;\n    const height = cardBounds.height;\n\n    // Create new particles\n    for (let i = 0; i < 1500; i++) {\n      // Increased particles for better coverage\n      const particle = document.createElement('div');\n      particle.className = 'thanos-particle';\n\n      // Distribute particles evenly across the entire card area\n      const margin = 20; // Keep particles slightly away from edges\n      const x = margin + Math.random() * (width - 2 * margin);\n      const y = margin + Math.random() * (height - 2 * margin);\n\n      // Vary particle sizes with more larger particles\n      const sizeRange = Math.random();\n      const size = sizeRange < 0.3 ?\n      // 30% chance of larger particles\n      Math.random() * 8 + 4 :\n      // 4-12px\n      Math.random() * 4 + 2; // 2-6px\n\n      particle.style.width = \"\".concat(size, \"px\");\n      particle.style.height = \"\".concat(size, \"px\");\n\n      // Set final position\n      particle.style.left = \"\".concat(x, \"px\");\n      particle.style.top = \"\".concat(y, \"px\");\n\n      // Calculate starting positions in a circular pattern\n      const angle = Math.random() * Math.PI * 2;\n      const distance = 300 + Math.random() * 100; // 300-400px away\n      const startX = x + Math.cos(angle) * distance;\n      const startY = y + Math.sin(angle) * distance;\n      const tx = startX - x;\n      const ty = startY - y;\n      particle.style.setProperty('--tx', \"\".concat(tx, \"px\"));\n      particle.style.setProperty('--ty', \"\".concat(ty, \"px\"));\n\n      // Randomize the opacity for more dynamic effect\n      const maxOpacity = 0.7 + Math.random() * 0.3; // 0.7-1.0\n      particle.style.setProperty('--max-opacity', maxOpacity);\n\n      // Enhanced animation timing with staggered delays\n      const inDelay = Math.random() * 0.3; // Faster initial appearance\n      const holdDelay = 1.2; // Shorter hold time\n      const outDelay = holdDelay + Math.random() * 0.5; // More varied exit\n\n      particle.style.animation = \"\\n        particleAnimationIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) \".concat(inDelay, \"s forwards,\\n        particleAnimationOut 0.8s cubic-bezier(0.4, 0, 0.2, 1) \").concat(outDelay, \"s forwards\\n      \");\n      particlesWrapper.appendChild(particle);\n    }\n\n    // Ensure particles wrapper is inserted at the correct position\n    const cardContent = element.querySelector('.card-content');\n    element.insertBefore(particlesWrapper, cardContent);\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    const inputValue = event.target.elements.inputName.value; // Ensure this is correct\n    // Check if inputValue is being sent correctly\n    if (inputValue) {\n      // Send inputValue to the AI\n      sendToAI(inputValue);\n    } else {\n      console.error(\"Input value is empty\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(AnimatePresence, {\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      ref: cardRef,\n      className: \"magical-card\",\n      initial: {\n        opacity: 0,\n        scale: 0.8\n      },\n      animate: {\n        opacity: 1,\n        scale: 1\n      },\n      transition: {\n        duration: 0.5\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: message || \"Waiting for the game to begin...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, triggerEffect, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"6u/bLyT0WzEP0A9aknmDXb+lDH8=\");\n_c = MagicalQuestionCard;\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useEffect","useRef","motion","AnimatePresence","jsxDEV","_jsxDEV","MagicalQuestionCard","_ref","_s","message","triggerEffect","cardRef","current","createParticles","element","existingWrapper","querySelector","remove","particlesWrapper","document","createElement","className","cardBounds","getBoundingClientRect","width","height","i","particle","margin","x","Math","random","y","sizeRange","size","style","concat","left","top","angle","PI","distance","startX","cos","startY","sin","tx","ty","setProperty","maxOpacity","inDelay","holdDelay","outDelay","animation","appendChild","cardContent","insertBefore","handleSubmit","event","preventDefault","inputValue","target","elements","inputName","value","sendToAI","console","error","children","div","ref","initial","opacity","scale","animate","transition","duration","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport '../styles/MagicalQuestionCard.css';\n\nconst MagicalQuestionCard = ({ message, triggerEffect }) => {\n  const cardRef = useRef(null);\n\n  useEffect(() => {\n    if (cardRef.current) {\n      createParticles(cardRef.current);\n    }\n  }, [message, triggerEffect]);\n\n  const createParticles = (element) => {\n    // Clear existing particles\n    const existingWrapper = element.querySelector('.particles-wrapper');\n    if (existingWrapper) {\n      existingWrapper.remove();\n    }\n\n    // Create particles wrapper\n    const particlesWrapper = document.createElement('div');\n    particlesWrapper.className = 'particles-wrapper';\n    \n    // Get the card bounds\n    const cardBounds = element.getBoundingClientRect();\n    const width = cardBounds.width;\n    const height = cardBounds.height;\n    \n    // Create new particles\n    for (let i = 0; i < 1500; i++) { // Increased particles for better coverage\n      const particle = document.createElement('div');\n      particle.className = 'thanos-particle';\n      \n      // Distribute particles evenly across the entire card area\n      const margin = 20; // Keep particles slightly away from edges\n      const x = margin + (Math.random() * (width - 2 * margin));\n      const y = margin + (Math.random() * (height - 2 * margin));\n      \n      // Vary particle sizes with more larger particles\n      const sizeRange = Math.random();\n      const size = sizeRange < 0.3 ? // 30% chance of larger particles\n        Math.random() * 8 + 4 : // 4-12px\n        Math.random() * 4 + 2;  // 2-6px\n      \n      particle.style.width = `${size}px`;\n      particle.style.height = `${size}px`;\n      \n      // Set final position\n      particle.style.left = `${x}px`;\n      particle.style.top = `${y}px`;\n      \n      // Calculate starting positions in a circular pattern\n      const angle = Math.random() * Math.PI * 2;\n      const distance = 300 + Math.random() * 100; // 300-400px away\n      const startX = x + Math.cos(angle) * distance;\n      const startY = y + Math.sin(angle) * distance;\n      \n      const tx = startX - x;\n      const ty = startY - y;\n      \n      particle.style.setProperty('--tx', `${tx}px`);\n      particle.style.setProperty('--ty', `${ty}px`);\n      \n      // Randomize the opacity for more dynamic effect\n      const maxOpacity = 0.7 + Math.random() * 0.3; // 0.7-1.0\n      particle.style.setProperty('--max-opacity', maxOpacity);\n      \n      // Enhanced animation timing with staggered delays\n      const inDelay = Math.random() * 0.3; // Faster initial appearance\n      const holdDelay = 1.2; // Shorter hold time\n      const outDelay = holdDelay + Math.random() * 0.5; // More varied exit\n      \n      particle.style.animation = `\n        particleAnimationIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) ${inDelay}s forwards,\n        particleAnimationOut 0.8s cubic-bezier(0.4, 0, 0.2, 1) ${outDelay}s forwards\n      `;\n      \n      particlesWrapper.appendChild(particle);\n    }\n\n    // Ensure particles wrapper is inserted at the correct position\n    const cardContent = element.querySelector('.card-content');\n    element.insertBefore(particlesWrapper, cardContent);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const inputValue = event.target.elements.inputName.value; // Ensure this is correct\n    // Check if inputValue is being sent correctly\n    if (inputValue) {\n        // Send inputValue to the AI\n        sendToAI(inputValue);\n    } else {\n        console.error(\"Input value is empty\");\n    }\n  }\n\n  return (\n    <AnimatePresence>\n      <motion.div \n        ref={cardRef}\n        className=\"magical-card\"\n        key={triggerEffect}\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"card-content\">\n          {message || \"Waiting for the game to begin...\"}\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}