{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\n// MagicalQuestionCard.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../styles/MagicalQuestionCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateDustParticles = () => {\n  const particles = [];\n  for (let i = 0; i < 80; i++) {\n    const size = Math.random() * 10 + 5;\n    const randomX = Math.random() * 200 - 50; // Range: -50% to 150%\n    const randomY = Math.random() * 200 - 50; // Range: -50% to 150%\n    const delay = Math.random() * 1.5;\n    particles.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dust-particle\",\n      style: {\n        left: \"\".concat(randomX, \"%\"),\n        top: \"\".concat(randomY, \"%\"),\n        width: \"\".concat(size, \"px\"),\n        height: \"\".concat(size, \"px\"),\n        animationDelay: \"\".concat(delay, \"s\")\n      }\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this));\n  }\n  return particles;\n};\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    question = \"Default Question\"\n  } = _ref;\n  const [show, setShow] = useState(false);\n  const [dustParticles, setDustParticles] = useState([]);\n  const dustFieldRef = useRef(null);\n  useEffect(() => {\n    setShow(true);\n    setDustParticles(generateDustParticles());\n\n    // Clear any previous particles by replacing with new ones. \n    if (dustFieldRef.current) {\n      dustFieldRef.current.innerHTML = '';\n      dustFieldRef.current.appendChild(document.createElement('div'));\n    }\n    const timer = setTimeout(() => {\n      setShow(false);\n    }, 5000);\n    return () => clearTimeout(timer);\n  }, [question]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container \".concat(show ? \"show\" : \"\"),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dust-field\",\n        ref: dustFieldRef,\n        children: dustParticles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"question-text\",\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"tCBZr1UeIRutPodsPxgSXg4Vb5M=\");\n_c = MagicalQuestionCard;\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","generateDustParticles","particles","i","size","Math","random","randomX","randomY","delay","push","className","style","left","concat","top","width","height","animationDelay","fileName","_jsxFileName","lineNumber","columnNumber","MagicalQuestionCard","_ref","_s","question","show","setShow","dustParticles","setDustParticles","dustFieldRef","current","innerHTML","appendChild","document","createElement","timer","setTimeout","clearTimeout","children","ref","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["// MagicalQuestionCard.js\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../styles/MagicalQuestionCard.css\";\n\nconst generateDustParticles = () => {\n  const particles = [];\n  for (let i = 0; i < 80; i++) {\n    const size = Math.random() * 10 + 5;\n    const randomX = Math.random() * 200 - 50; // Range: -50% to 150%\n    const randomY = Math.random() * 200 - 50; // Range: -50% to 150%\n    const delay = Math.random() * 1.5;\n\n    particles.push(\n      <div\n        key={i}\n        className=\"dust-particle\"\n        style={{\n          left: `${randomX}%`,\n          top: `${randomY}%`,\n          width: `${size}px`,\n          height: `${size}px`,\n          animationDelay: `${delay}s`,\n        }}\n      ></div>\n    );\n  }\n  return particles;\n};\n\nconst MagicalQuestionCard = ({ question = \"Default Question\" }) => {\n  const [show, setShow] = useState(false);\n  const [dustParticles, setDustParticles] = useState([]);\n  const dustFieldRef = useRef(null);\n\n  useEffect(() => {\n    setShow(true);\n    setDustParticles(generateDustParticles());\n\n     // Clear any previous particles by replacing with new ones. \n     if (dustFieldRef.current){\n       dustFieldRef.current.innerHTML = '';\n       dustFieldRef.current.appendChild(document.createElement('div'))\n       }\n   \n\n    const timer = setTimeout(() => {\n      setShow(false);\n    }, 5000);\n\n    return () => clearTimeout(timer);\n  }, [question]);\n\n  return (\n    <div className=\"card-wrapper\">\n       <div className={`card-container ${show ? \"show\" : \"\"}`}>\n       <div className=\"dust-field\" ref={dustFieldRef}>\n          {dustParticles}\n          </div>\n        <div className=\"card-content\">\n          <h2 className=\"question-text\">{question}</h2>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}