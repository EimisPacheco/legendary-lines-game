{"ast":null,"code":"import _objectSpread from \"/Users/eimis/test-server/react_projects/cloud-architecture-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/GamePresenter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MagicalQuestionCard from \"./MagicalQuestionCard\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport useSound from 'use-sound';\nimport correctSound from '../assets/sounds/correct.mp3';\nimport wrongSound from '../assets/sounds/wrong.mp3';\nimport confetti from 'canvas-confetti';\nimport { getPhrase, checkAnswer, handleAPIError } from '../services/aiService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CATEGORIES = {\n  SONG: {\n    name: 'Song',\n    points: 1\n  },\n  MOVIE: {\n    name: 'Movie',\n    points: 2\n  },\n  FAMOUS_PERSON: {\n    name: 'Famous Person',\n    points: 3\n  },\n  FICTIONAL_CHARACTER: {\n    name: 'Fictional Character',\n    points: 3\n  },\n  BOOK: {\n    name: 'Book',\n    points: 4\n  },\n  POET: {\n    name: 'Poet',\n    points: 5\n  },\n  QUOTE: {\n    name: 'Quote',\n    points: 6\n  }\n};\nconst DIFFICULTIES = {\n  EASY: {\n    color: '#4CAF50',\n    multiplier: 1,\n    particles: {\n      particleCount: 50,\n      spread: 45,\n      colors: ['#4CAF50', '#81C784']\n    },\n    animation: {\n      scale: 1.05,\n      transition: {\n        duration: 0.3\n      }\n    }\n  },\n  MEDIUM: {\n    color: '#FFC107',\n    multiplier: 1.5,\n    particles: {\n      particleCount: 100,\n      spread: 70,\n      colors: ['#FFC107', '#FFD54F']\n    },\n    animation: {\n      scale: 1.1,\n      rotate: [0, 5, -5, 0],\n      transition: {\n        duration: 0.5\n      }\n    }\n  },\n  HARD: {\n    color: '#F44336',\n    multiplier: 2,\n    particles: {\n      particleCount: 150,\n      spread: 100,\n      colors: ['#F44336', '#EF5350'],\n      startVelocity: 45\n    },\n    animation: {\n      scale: 1.15,\n      rotate: [0, 10, -10, 0],\n      transition: {\n        duration: 0.7\n      }\n    }\n  }\n};\nconst GamePresenter = () => {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [yearGuess, setYearGuess] = useState(\"\");\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [difficulty, setDifficulty] = useState('MEDIUM');\n  const [retryCount, setRetryCount] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [progressiveScore, setProgressiveScore] = useState(0);\n  const [streakCount, setStreakCount] = useState(0);\n  const [errorRetries, setErrorRetries] = useState({});\n  const [playCorrect] = useSound(correctSound);\n  const [playWrong] = useSound(wrongSound);\n  const startGame = () => {\n    setGameStarted(true);\n    // Here we'll add the API call to get the first phrase\n  };\n  const handleError = async (error, action) => {\n    const errorKey = \"\".concat(action, \"-\").concat(Date.now());\n    const currentRetries = errorRetries[errorKey] || 0;\n    try {\n      const {\n        shouldRetry,\n        delay\n      } = await handleAPIError(error, currentRetries);\n      if (shouldRetry) {\n        setErrorRetries(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          [errorKey]: currentRetries + 1\n        }));\n\n        // Show retry message\n        setErrorMessage(\"Retrying... Attempt \".concat(currentRetries + 1, \"/3\"));\n\n        // Retry the action\n        setTimeout(() => {\n          if (action === 'fetch') {\n            handleCategorySelect(selectedCategory);\n          } else if (action === 'submit') {\n            submitGuess();\n          }\n        }, delay);\n      }\n    } catch (finalError) {\n      setErrorMessage(finalError.message);\n      // Clear retry count for this error\n      setErrorRetries(prev => {\n        const newRetries = _objectSpread({}, prev);\n        delete newRetries[errorKey];\n        return newRetries;\n      });\n    }\n  };\n  const handleCategorySelect = async category => {\n    setLoading(true);\n    setErrorMessage(null);\n    try {\n      const phraseData = await getPhrase(category, difficulty);\n      setCurrentPhrase(phraseData);\n      setSelectedCategory(category);\n      setTriggerEffect(prev => prev + 1);\n      setRetryCount(0); // Reset retry count on success\n    } catch (error) {\n      handleError(error, 'fetch phrase');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleYearGuess = e => {\n    setYearGuess(e.target.value);\n  };\n  const submitGuess = async (userAnswer, yearGuess) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await checkAnswer(userAnswer, currentPhrase, selectedCategory);\n      if (result.isCorrect) {\n        playCorrect();\n        confetti({\n          particleCount: 100,\n          spread: 70,\n          origin: {\n            y: 0.6\n          }\n        });\n\n        // Calculate points\n        let points = CATEGORIES[selectedCategory].points;\n        if (parseInt(yearGuess) === currentPhrase.year) {\n          points *= 2; // Double points for correct year\n        }\n        setScore(prev => prev + points);\n\n        // Show success message\n        setShowResult({\n          correct: true,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      } else {\n        playWrong();\n        setShowResult({\n          correct: false,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      }\n    } catch (err) {\n      setError('Failed to check answer. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const calculatePoints = (result, yearCorrect) => {\n    const basePoints = CATEGORIES[selectedCategory].points;\n    const difficultyMultiplier = DIFFICULTIES[difficulty].multiplier;\n    let points = basePoints * difficultyMultiplier;\n\n    // Add partial credit if available\n    if (result.partialCredit && result.partialCredit > 0) {\n      points *= result.partialCredit / 100;\n    }\n\n    // Double points for correct year\n    if (yearCorrect) points *= 2;\n    return Math.round(points);\n  };\n  const triggerDifficultyEffect = (difficulty, correct) => {\n    if (!correct) return;\n    const config = DIFFICULTIES[difficulty].particles;\n    confetti(_objectSpread(_objectSpread({}, config), {}, {\n      origin: {\n        y: 0.6\n      },\n      gravity: 1.5,\n      scalar: 1.2,\n      ticks: 200\n    }));\n  };\n  const updateDifficultyBasedOnProgress = () => {\n    if (streakCount >= 3 && progressiveScore >= 50) {\n      setDifficulty('HARD');\n    } else if (streakCount >= 2 && progressiveScore >= 25) {\n      setDifficulty('MEDIUM');\n    }\n  };\n  const handleCorrectAnswer = points => {\n    setStreakCount(prev => prev + 1);\n    setProgressiveScore(prev => prev + points);\n    updateDifficultyBasedOnProgress();\n\n    // Trigger appropriate difficulty effect\n    triggerDifficultyEffect(difficulty, true);\n  };\n  const handleWrongAnswer = () => {\n    setStreakCount(0);\n    // Optionally reduce progressive score\n    setProgressiveScore(prev => Math.max(0, prev - 5));\n  };\n\n  // Add visual feedback for progressive difficulty\n  const renderProgressiveIndicator = () => /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"progressive-difficulty\",\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"difficulty-fill\",\n        style: {\n          width: \"\".concat(progressiveScore / 50 * 100, \"%\"),\n          backgroundColor: DIFFICULTIES[difficulty].color\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"streak-counter\",\n      children: [\"Streak: \", streakCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [!gameStarted ? /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"game-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Legendary Lines Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"difficulty-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select Difficulty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"difficulty-buttons\",\n          children: Object.keys(DIFFICULTIES).map(diff => /*#__PURE__*/_jsxDEV(motion.button, {\n            whileHover: {\n              scale: 1.05\n            },\n            whileTap: {\n              scale: 0.95\n            },\n            className: \"difficulty-btn \".concat(difficulty === diff ? 'selected' : ''),\n            style: {\n              backgroundColor: DIFFICULTIES[diff].color,\n              opacity: difficulty === diff ? 1 : 0.7\n            },\n            onClick: () => setDifficulty(diff),\n            children: [diff, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"multiplier\",\n              children: [DIFFICULTIES[diff].multiplier, \"x points\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this)]\n          }, diff, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounds-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Number of Rounds:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"20\",\n          value: numberOfRounds,\n          onChange: e => setNumberOfRounds(parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        className: \"start-btn\",\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Round \", currentIndex + 1, \" of \", numberOfRounds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MagicalQuestionCard, {\n        question: (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.phrase) || \"Select a category to begin\",\n        triggerEffect: triggerEffect,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"categories-grid\",\n        children: Object.entries(CATEGORIES).map(_ref => {\n          let [key, category] = _ref;\n          return /*#__PURE__*/_jsxDEV(motion.button, {\n            whileHover: {\n              scale: 1.05\n            },\n            whileTap: {\n              scale: 0.95\n            },\n            className: \"category-btn \".concat(selectedCategory === key ? 'selected' : ''),\n            onClick: () => handleCategorySelect(key),\n            children: [category.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"points\",\n              children: [\"(\", category.points, \" pts)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), selectedCategory && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0,\n          y: 20\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        className: \"guess-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your answer...\",\n          className: \"answer-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-guess\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Year (optional)\",\n            value: yearGuess,\n            onChange: handleYearGuess,\n            className: \"year-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bonus-text\",\n            children: \"Double points for correct year!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitGuess(),\n          className: \"submit-btn\",\n          children: \"Submit Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 13\n      }, this), loading && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        className: \"loading-spinner\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }, this), error && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), renderProgressiveIndicator(), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: errorMessage && /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"error-message\",\n        initial: {\n          opacity: 0,\n          y: 20\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        exit: {\n          opacity: 0,\n          y: -20\n        },\n        children: [errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setErrorMessage(null),\n          children: \"Dismiss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePresenter, \"SZ0TmHU/0Zt9lHs4K6F+M5z4K5A=\", false, function () {\n  return [useSound, useSound];\n});\n_c = GamePresenter;\nexport default GamePresenter;\nvar _c;\n$RefreshReg$(_c, \"GamePresenter\");","map":{"version":3,"names":["React","useState","useEffect","MagicalQuestionCard","motion","AnimatePresence","useSound","correctSound","wrongSound","confetti","getPhrase","checkAnswer","handleAPIError","jsxDEV","_jsxDEV","Fragment","_Fragment","CATEGORIES","SONG","name","points","MOVIE","FAMOUS_PERSON","FICTIONAL_CHARACTER","BOOK","POET","QUOTE","DIFFICULTIES","EASY","color","multiplier","particles","particleCount","spread","colors","animation","scale","transition","duration","MEDIUM","rotate","HARD","startVelocity","GamePresenter","_s","currentIndex","setCurrentIndex","score","setScore","selectedCategory","setSelectedCategory","numberOfRounds","setNumberOfRounds","gameStarted","setGameStarted","currentPhrase","setCurrentPhrase","yearGuess","setYearGuess","triggerEffect","setTriggerEffect","showResult","setShowResult","loading","setLoading","error","setError","difficulty","setDifficulty","retryCount","setRetryCount","errorMessage","setErrorMessage","progressiveScore","setProgressiveScore","streakCount","setStreakCount","errorRetries","setErrorRetries","playCorrect","playWrong","startGame","handleError","action","errorKey","concat","Date","now","currentRetries","shouldRetry","delay","prev","_objectSpread","setTimeout","handleCategorySelect","submitGuess","finalError","message","newRetries","category","phraseData","handleYearGuess","e","target","value","userAnswer","result","isCorrect","origin","y","parseInt","year","correct","explanation","similarity","err","calculatePoints","yearCorrect","basePoints","difficultyMultiplier","partialCredit","Math","round","triggerDifficultyEffect","config","gravity","scalar","ticks","updateDifficultyBasedOnProgress","handleCorrectAnswer","handleWrongAnswer","max","renderProgressiveIndicator","div","className","initial","opacity","animate","children","style","width","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","diff","button","whileHover","whileTap","onClick","type","min","onChange","question","phrase","entries","_ref","key","placeholder","exit","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/GamePresenter.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MagicalQuestionCard from \"./MagicalQuestionCard\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport useSound from 'use-sound';\nimport correctSound from '../assets/sounds/correct.mp3';\nimport wrongSound from '../assets/sounds/wrong.mp3';\nimport confetti from 'canvas-confetti';\nimport { getPhrase, checkAnswer, handleAPIError } from '../services/aiService';\n\nconst CATEGORIES = {\n  SONG: { name: 'Song', points: 1 },\n  MOVIE: { name: 'Movie', points: 2 },\n  FAMOUS_PERSON: { name: 'Famous Person', points: 3 },\n  FICTIONAL_CHARACTER: { name: 'Fictional Character', points: 3 },\n  BOOK: { name: 'Book', points: 4 },\n  POET: { name: 'Poet', points: 5 },\n  QUOTE: { name: 'Quote', points: 6 }\n};\n\nconst DIFFICULTIES = {\n  EASY: { \n    color: '#4CAF50', \n    multiplier: 1,\n    particles: {\n      particleCount: 50,\n      spread: 45,\n      colors: ['#4CAF50', '#81C784']\n    },\n    animation: {\n      scale: 1.05,\n      transition: { duration: 0.3 }\n    }\n  },\n  MEDIUM: { \n    color: '#FFC107', \n    multiplier: 1.5,\n    particles: {\n      particleCount: 100,\n      spread: 70,\n      colors: ['#FFC107', '#FFD54F']\n    },\n    animation: {\n      scale: 1.1,\n      rotate: [0, 5, -5, 0],\n      transition: { duration: 0.5 }\n    }\n  },\n  HARD: { \n    color: '#F44336', \n    multiplier: 2,\n    particles: {\n      particleCount: 150,\n      spread: 100,\n      colors: ['#F44336', '#EF5350'],\n      startVelocity: 45\n    },\n    animation: {\n      scale: 1.15,\n      rotate: [0, 10, -10, 0],\n      transition: { duration: 0.7 }\n    }\n  }\n};\n\nconst GamePresenter = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [yearGuess, setYearGuess] = useState(\"\");\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [difficulty, setDifficulty] = useState('MEDIUM');\n  const [retryCount, setRetryCount] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [progressiveScore, setProgressiveScore] = useState(0);\n  const [streakCount, setStreakCount] = useState(0);\n  const [errorRetries, setErrorRetries] = useState({});\n\n  const [playCorrect] = useSound(correctSound);\n  const [playWrong] = useSound(wrongSound);\n\n  const startGame = () => {\n    setGameStarted(true);\n    // Here we'll add the API call to get the first phrase\n  };\n\n  const handleError = async (error, action) => {\n    const errorKey = `${action}-${Date.now()}`;\n    const currentRetries = errorRetries[errorKey] || 0;\n    \n    try {\n      const { shouldRetry, delay } = await handleAPIError(error, currentRetries);\n      \n      if (shouldRetry) {\n        setErrorRetries(prev => ({\n          ...prev,\n          [errorKey]: currentRetries + 1\n        }));\n        \n        // Show retry message\n        setErrorMessage(`Retrying... Attempt ${currentRetries + 1}/3`);\n        \n        // Retry the action\n        setTimeout(() => {\n          if (action === 'fetch') {\n            handleCategorySelect(selectedCategory);\n          } else if (action === 'submit') {\n            submitGuess();\n          }\n        }, delay);\n      }\n    } catch (finalError) {\n      setErrorMessage(finalError.message);\n      // Clear retry count for this error\n      setErrorRetries(prev => {\n        const newRetries = { ...prev };\n        delete newRetries[errorKey];\n        return newRetries;\n      });\n    }\n  };\n\n  const handleCategorySelect = async (category) => {\n    setLoading(true);\n    setErrorMessage(null);\n    \n    try {\n      const phraseData = await getPhrase(category, difficulty);\n      setCurrentPhrase(phraseData);\n      setSelectedCategory(category);\n      setTriggerEffect(prev => prev + 1);\n      setRetryCount(0); // Reset retry count on success\n    } catch (error) {\n      handleError(error, 'fetch phrase');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleYearGuess = (e) => {\n    setYearGuess(e.target.value);\n  };\n\n  const submitGuess = async (userAnswer, yearGuess) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await checkAnswer(userAnswer, currentPhrase, selectedCategory);\n      \n      if (result.isCorrect) {\n        playCorrect();\n        confetti({\n          particleCount: 100,\n          spread: 70,\n          origin: { y: 0.6 }\n        });\n        \n        // Calculate points\n        let points = CATEGORIES[selectedCategory].points;\n        if (parseInt(yearGuess) === currentPhrase.year) {\n          points *= 2; // Double points for correct year\n        }\n        setScore(prev => prev + points);\n        \n        // Show success message\n        setShowResult({\n          correct: true,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      } else {\n        playWrong();\n        setShowResult({\n          correct: false,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      }\n      \n    } catch (err) {\n      setError('Failed to check answer. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculatePoints = (result, yearCorrect) => {\n    const basePoints = CATEGORIES[selectedCategory].points;\n    const difficultyMultiplier = DIFFICULTIES[difficulty].multiplier;\n    let points = basePoints * difficultyMultiplier;\n    \n    // Add partial credit if available\n    if (result.partialCredit && result.partialCredit > 0) {\n      points *= (result.partialCredit / 100);\n    }\n    \n    // Double points for correct year\n    if (yearCorrect) points *= 2;\n    \n    return Math.round(points);\n  };\n\n  const triggerDifficultyEffect = (difficulty, correct) => {\n    if (!correct) return;\n    \n    const config = DIFFICULTIES[difficulty].particles;\n    confetti({\n      ...config,\n      origin: { y: 0.6 },\n      gravity: 1.5,\n      scalar: 1.2,\n      ticks: 200\n    });\n  };\n\n  const updateDifficultyBasedOnProgress = () => {\n    if (streakCount >= 3 && progressiveScore >= 50) {\n      setDifficulty('HARD');\n    } else if (streakCount >= 2 && progressiveScore >= 25) {\n      setDifficulty('MEDIUM');\n    }\n  };\n\n  const handleCorrectAnswer = (points) => {\n    setStreakCount(prev => prev + 1);\n    setProgressiveScore(prev => prev + points);\n    updateDifficultyBasedOnProgress();\n    \n    // Trigger appropriate difficulty effect\n    triggerDifficultyEffect(difficulty, true);\n  };\n\n  const handleWrongAnswer = () => {\n    setStreakCount(0);\n    // Optionally reduce progressive score\n    setProgressiveScore(prev => Math.max(0, prev - 5));\n  };\n\n  // Add visual feedback for progressive difficulty\n  const renderProgressiveIndicator = () => (\n    <motion.div \n      className=\"progressive-difficulty\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <div className=\"difficulty-bar\">\n        <div \n          className=\"difficulty-fill\"\n          style={{ \n            width: `${(progressiveScore / 50) * 100}%`,\n            backgroundColor: DIFFICULTIES[difficulty].color\n          }}\n        />\n      </div>\n      <div className=\"streak-counter\">\n        Streak: {streakCount}\n      </div>\n    </motion.div>\n  );\n\n  return (\n    <div className=\"game-container\">\n      {!gameStarted ? (\n        <motion.div \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"game-setup\"\n        >\n          <h1>Legendary Lines Game</h1>\n          \n          {/* Difficulty Selection */}\n          <div className=\"difficulty-selector\">\n            <h3>Select Difficulty:</h3>\n            <div className=\"difficulty-buttons\">\n              {Object.keys(DIFFICULTIES).map(diff => (\n                <motion.button\n                  key={diff}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className={`difficulty-btn ${difficulty === diff ? 'selected' : ''}`}\n                  style={{ \n                    backgroundColor: DIFFICULTIES[diff].color,\n                    opacity: difficulty === diff ? 1 : 0.7 \n                  }}\n                  onClick={() => setDifficulty(diff)}\n                >\n                  {diff}\n                  <span className=\"multiplier\">\n                    {DIFFICULTIES[diff].multiplier}x points\n                  </span>\n                </motion.button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"rounds-selector\">\n            <label>Number of Rounds:</label>\n            <input \n              type=\"number\" \n              min=\"1\" \n              max=\"20\" \n              value={numberOfRounds}\n              onChange={(e) => setNumberOfRounds(parseInt(e.target.value))}\n            />\n          </div>\n          <button onClick={startGame} className=\"start-btn\">\n            Start Game\n          </button>\n        </motion.div>\n      ) : (\n        <>\n          <div className=\"game-header\">\n            <h2>Score: {score}</h2>\n            <h3>Round {currentIndex + 1} of {numberOfRounds}</h3>\n          </div>\n\n          <MagicalQuestionCard \n            question={currentPhrase?.phrase || \"Select a category to begin\"} \n            triggerEffect={triggerEffect}\n            loading={loading}\n          />\n\n          <div className=\"categories-grid\">\n            {Object.entries(CATEGORIES).map(([key, category]) => (\n              <motion.button\n                key={key}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`category-btn ${selectedCategory === key ? 'selected' : ''}`}\n                onClick={() => handleCategorySelect(key)}\n              >\n                {category.name}\n                <span className=\"points\">({category.points} pts)</span>\n              </motion.button>\n            ))}\n          </div>\n\n          {selectedCategory && (\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"guess-section\"\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter your answer...\"\n                className=\"answer-input\"\n              />\n              <div className=\"year-guess\">\n                <input\n                  type=\"number\"\n                  placeholder=\"Year (optional)\"\n                  value={yearGuess}\n                  onChange={handleYearGuess}\n                  className=\"year-input\"\n                />\n                <span className=\"bonus-text\">Double points for correct year!</span>\n              </div>\n              <button \n                onClick={() => submitGuess()} \n                className=\"submit-btn\"\n              >\n                Submit Answer\n              </button>\n            </motion.div>\n          )}\n\n          {/* Show loading state */}\n          {loading && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"loading-spinner\"\n            >\n              Loading...\n            </motion.div>\n          )}\n          \n          {/* Show error state */}\n          {error && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"error-message\"\n            >\n              {error}\n            </motion.div>\n          )}\n        </>\n      )}\n\n      {renderProgressiveIndicator()}\n      \n      <AnimatePresence>\n        {errorMessage && (\n          <motion.div\n            className=\"error-message\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n          >\n            {errorMessage}\n            <button onClick={() => setErrorMessage(null)}>\n              Dismiss\n            </button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default GamePresenter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}