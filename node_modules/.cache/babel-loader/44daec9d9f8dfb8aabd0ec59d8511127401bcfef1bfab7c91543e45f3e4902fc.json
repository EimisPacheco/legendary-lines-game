{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport '../styles/MagicalQuestionCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    message,\n    triggerEffect\n  } = _ref;\n  const cardRef = useRef(null);\n  useEffect(() => {\n    if (cardRef.current) {\n      createParticles(cardRef.current);\n    }\n  }, [message, triggerEffect]);\n  const createParticles = element => {\n    // Clear existing particles\n    const existingWrapper = element.querySelector('.particles-wrapper');\n    if (existingWrapper) {\n      existingWrapper.remove();\n    }\n\n    // Create particles wrapper\n    const particlesWrapper = document.createElement('div');\n    particlesWrapper.className = 'particles-wrapper';\n\n    // Get the card bounds\n    const cardBounds = element.getBoundingClientRect();\n    const width = cardBounds.width;\n    const height = cardBounds.height;\n\n    // Create a grid for even distribution\n    const columns = 30;\n    const rows = 20;\n    const cellWidth = width / columns;\n    const cellHeight = height / rows;\n    const particlesPerCell = 4; // This will give us around 2400 particles total\n\n    // Create particles in a grid pattern with slight randomization\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < columns; col++) {\n        for (let i = 0; i < particlesPerCell; i++) {\n          const particle = document.createElement('div');\n          particle.className = 'thanos-particle';\n\n          // Base position in the current cell\n          const baseX = col * cellWidth;\n          const baseY = row * cellHeight;\n\n          // Add randomization within the cell\n          const x = baseX + Math.random() * cellWidth;\n          const y = baseY + Math.random() * cellHeight;\n\n          // Consistent small particle size\n          const size = Math.random() * 2 + 1; // 1-3px\n          particle.style.width = \"\".concat(size, \"px\");\n          particle.style.height = \"\".concat(size, \"px\");\n\n          // Set final position\n          particle.style.left = \"\".concat(x, \"px\");\n          particle.style.top = \"\".concat(y, \"px\");\n\n          // Calculate movement from edges\n          const centerX = width / 2;\n          const centerY = height / 2;\n          const angle = Math.atan2(y - centerY, x - centerX);\n          const distance = Math.min(width, height) * 0.5;\n          const tx = Math.cos(angle) * distance;\n          const ty = Math.sin(angle) * distance;\n          particle.style.setProperty('--tx', \"\".concat(tx, \"px\"));\n          particle.style.setProperty('--ty', \"\".concat(ty, \"px\"));\n\n          // Keep exact timing at 0.8s as requested\n          const inDelay = Math.random() * 0.3;\n          const outDelay = 1.5 + Math.random() * 0.3;\n          particle.style.animation = \"\\n            particleAnimationIn 0.8s ease-out \".concat(inDelay, \"s forwards,\\n            particleAnimationOut 0.8s ease-in \").concat(outDelay, \"s forwards\\n          \");\n          particlesWrapper.appendChild(particle);\n        }\n      }\n    }\n\n    // Insert particles wrapper as first child\n    element.insertBefore(particlesWrapper, element.firstChild);\n  };\n  function handleSubmit(event) {\n    event.preventDefault();\n    const inputValue = event.target.elements.inputName.value; // Ensure this is correct\n    // Check if inputValue is being sent correctly\n    if (inputValue) {\n      // Send inputValue to the AI\n      sendToAI(inputValue);\n    } else {\n      console.error(\"Input value is empty\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(AnimatePresence, {\n    children: /*#__PURE__*/_jsxDEV(motion.div, {\n      ref: cardRef,\n      className: \"magical-card\",\n      initial: {\n        opacity: 0,\n        scale: 0.8\n      },\n      animate: {\n        opacity: 1,\n        scale: 1\n      },\n      transition: {\n        duration: 0.5\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: message || \"Waiting for the game to begin...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, triggerEffect, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"6u/bLyT0WzEP0A9aknmDXb+lDH8=\");\n_c = MagicalQuestionCard;\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useEffect","useRef","motion","AnimatePresence","jsxDEV","_jsxDEV","MagicalQuestionCard","_ref","_s","message","triggerEffect","cardRef","current","createParticles","element","existingWrapper","querySelector","remove","particlesWrapper","document","createElement","className","cardBounds","getBoundingClientRect","width","height","columns","rows","cellWidth","cellHeight","particlesPerCell","row","col","i","particle","baseX","baseY","x","Math","random","y","size","style","concat","left","top","centerX","centerY","angle","atan2","distance","min","tx","cos","ty","sin","setProperty","inDelay","outDelay","animation","appendChild","insertBefore","firstChild","handleSubmit","event","preventDefault","inputValue","target","elements","inputName","value","sendToAI","console","error","children","div","ref","initial","opacity","scale","animate","transition","duration","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport '../styles/MagicalQuestionCard.css';\n\nconst MagicalQuestionCard = ({ message, triggerEffect }) => {\n  const cardRef = useRef(null);\n\n  useEffect(() => {\n    if (cardRef.current) {\n      createParticles(cardRef.current);\n    }\n  }, [message, triggerEffect]);\n\n  const createParticles = (element) => {\n    // Clear existing particles\n    const existingWrapper = element.querySelector('.particles-wrapper');\n    if (existingWrapper) {\n      existingWrapper.remove();\n    }\n\n    // Create particles wrapper\n    const particlesWrapper = document.createElement('div');\n    particlesWrapper.className = 'particles-wrapper';\n    \n    // Get the card bounds\n    const cardBounds = element.getBoundingClientRect();\n    const width = cardBounds.width;\n    const height = cardBounds.height;\n    \n    // Create a grid for even distribution\n    const columns = 30;\n    const rows = 20;\n    const cellWidth = width / columns;\n    const cellHeight = height / rows;\n    const particlesPerCell = 4; // This will give us around 2400 particles total\n    \n    // Create particles in a grid pattern with slight randomization\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < columns; col++) {\n        for (let i = 0; i < particlesPerCell; i++) {\n          const particle = document.createElement('div');\n          particle.className = 'thanos-particle';\n          \n          // Base position in the current cell\n          const baseX = col * cellWidth;\n          const baseY = row * cellHeight;\n          \n          // Add randomization within the cell\n          const x = baseX + (Math.random() * cellWidth);\n          const y = baseY + (Math.random() * cellHeight);\n          \n          // Consistent small particle size\n          const size = Math.random() * 2 + 1; // 1-3px\n          particle.style.width = `${size}px`;\n          particle.style.height = `${size}px`;\n          \n          // Set final position\n          particle.style.left = `${x}px`;\n          particle.style.top = `${y}px`;\n          \n          // Calculate movement from edges\n          const centerX = width / 2;\n          const centerY = height / 2;\n          const angle = Math.atan2(y - centerY, x - centerX);\n          const distance = Math.min(width, height) * 0.5;\n          \n          const tx = Math.cos(angle) * distance;\n          const ty = Math.sin(angle) * distance;\n          \n          particle.style.setProperty('--tx', `${tx}px`);\n          particle.style.setProperty('--ty', `${ty}px`);\n          \n          // Keep exact timing at 0.8s as requested\n          const inDelay = Math.random() * 0.3;\n          const outDelay = 1.5 + Math.random() * 0.3;\n          \n          particle.style.animation = `\n            particleAnimationIn 0.8s ease-out ${inDelay}s forwards,\n            particleAnimationOut 0.8s ease-in ${outDelay}s forwards\n          `;\n          \n          particlesWrapper.appendChild(particle);\n        }\n      }\n    }\n\n    // Insert particles wrapper as first child\n    element.insertBefore(particlesWrapper, element.firstChild);\n  };\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const inputValue = event.target.elements.inputName.value; // Ensure this is correct\n    // Check if inputValue is being sent correctly\n    if (inputValue) {\n        // Send inputValue to the AI\n        sendToAI(inputValue);\n    } else {\n        console.error(\"Input value is empty\");\n    }\n  }\n\n  return (\n    <AnimatePresence>\n      <motion.div \n        ref={cardRef}\n        className=\"magical-card\"\n        key={triggerEffect}\n        initial={{ opacity: 0, scale: 0.8 }}\n        animate={{ opacity: 1, scale: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"card-content\">\n          {message || \"Waiting for the game to begin...\"}\n        </div>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}