{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Added for development\n});\nconst DIFFICULTY_MODIFIERS = {\n  EASY: {\n    popularity: \"well-known\",\n    description: \"commonly recognized phrases\",\n    temperature: 0.7\n  },\n  MEDIUM: {\n    popularity: \"moderately known\",\n    description: \"somewhat challenging phrases\",\n    temperature: 0.8\n  },\n  HARD: {\n    popularity: \"obscure\",\n    description: \"rare and challenging phrases\",\n    temperature: 0.9\n  }\n};\nexport const getPhrase = async function () {\n  let category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'QUOTE';\n  let difficulty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MEDIUM';\n  // Add default category if none is selected\n  if (!category) {\n    console.warn('No category provided, using default: QUOTE');\n    category = 'QUOTE';\n  }\n  const difficultyConfig = DIFFICULTY_MODIFIERS[difficulty];\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: \"You are a game master for 'Legendary Lines'. Generate \".concat(difficultyConfig.popularity, \" content for the \").concat(category, \" category. Focus on \").concat(difficultyConfig.description, \".\")\n      }, {\n        role: \"user\",\n        content: \"Generate a \".concat(difficulty.toLowerCase(), \" difficulty \").concat(category.toLowerCase(), \" phrase.\")\n      }],\n      functions: [{\n        name: \"generatePhrase\",\n        description: \"Generate a phrase or quote for the game based on category and difficulty\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            phrase: {\n              type: \"string\",\n              description: \"The actual quote or phrase to be guessed\"\n            },\n            source: {\n              type: \"string\",\n              description: \"The origin of the phrase (book title, movie name, etc.)\"\n            },\n            year: {\n              type: \"number\",\n              description: \"The year the source was released/published\"\n            },\n            hint: {\n              type: \"string\",\n              description: \"A subtle hint without giving away the answer\"\n            },\n            additionalInfo: {\n              type: \"object\",\n              properties: {\n                creator: {\n                  type: \"string\",\n                  description: \"Director (for movies) or Artist/Band (for songs)\"\n                },\n                genre: {\n                  type: \"string\",\n                  description: \"The genre of the source material\"\n                }\n              }\n            }\n          },\n          required: [\"phrase\", \"source\", \"year\", \"hint\"]\n        }\n      }],\n      function_call: {\n        name: \"generatePhrase\"\n      }\n    });\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error generating phrase:', error);\n    throw error;\n  }\n};\nexport const checkAnswer = async (input, phraseData, questionType) => {\n  try {\n    // Example of sending a request to an AI model\n    const response = await fetch('/api/check-answer', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        input,\n        phraseData,\n        questionType\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const result = await response.json();\n    return result; // Assuming result contains { isCorrect: boolean, ... }\n  } catch (error) {\n    console.error('Error interacting with AI model:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","DIFFICULTY_MODIFIERS","EASY","popularity","description","temperature","MEDIUM","HARD","getPhrase","category","arguments","length","undefined","difficulty","console","warn","difficultyConfig","completion","chat","completions","create","model","messages","role","content","concat","toLowerCase","functions","name","parameters","type","properties","phrase","source","year","hint","additionalInfo","creator","genre","required","function_call","functionCall","choices","message","JSON","parse","error","checkAnswer","input","phraseData","questionType","response","fetch","method","headers","body","stringify","ok","Error","result","json"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/services/aiService.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true  // Added for development\n});\n\nconst DIFFICULTY_MODIFIERS = {\n  EASY: {\n    popularity: \"well-known\",\n    description: \"commonly recognized phrases\",\n    temperature: 0.7\n  },\n  MEDIUM: {\n    popularity: \"moderately known\",\n    description: \"somewhat challenging phrases\",\n    temperature: 0.8\n  },\n  HARD: {\n    popularity: \"obscure\",\n    description: \"rare and challenging phrases\",\n    temperature: 0.9\n  }\n};\n\nexport const getPhrase = async (category = 'QUOTE', difficulty = 'MEDIUM') => {\n  // Add default category if none is selected\n  if (!category) {\n    console.warn('No category provided, using default: QUOTE');\n    category = 'QUOTE';\n  }\n\n  const difficultyConfig = DIFFICULTY_MODIFIERS[difficulty];\n  \n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a game master for 'Legendary Lines'. Generate ${difficultyConfig.popularity} content for the ${category} category. Focus on ${difficultyConfig.description}.`\n        },\n        {\n          role: \"user\",\n          content: `Generate a ${difficulty.toLowerCase()} difficulty ${category.toLowerCase()} phrase.`\n        }\n      ],\n      functions: [{\n        name: \"generatePhrase\",\n        description: \"Generate a phrase or quote for the game based on category and difficulty\",\n        parameters: {\n          type: \"object\",\n          properties: {\n            phrase: {\n              type: \"string\",\n              description: \"The actual quote or phrase to be guessed\"\n            },\n            source: {\n              type: \"string\",\n              description: \"The origin of the phrase (book title, movie name, etc.)\"\n            },\n            year: {\n              type: \"number\",\n              description: \"The year the source was released/published\"\n            },\n            hint: {\n              type: \"string\",\n              description: \"A subtle hint without giving away the answer\"\n            },\n            additionalInfo: {\n              type: \"object\",\n              properties: {\n                creator: {\n                  type: \"string\",\n                  description: \"Director (for movies) or Artist/Band (for songs)\"\n                },\n                genre: {\n                  type: \"string\",\n                  description: \"The genre of the source material\"\n                }\n              }\n            }\n          },\n          required: [\"phrase\", \"source\", \"year\", \"hint\"]\n        }\n      }],\n      function_call: { name: \"generatePhrase\" }\n    });\n\n    const functionCall = completion.choices[0].message.function_call;\n    return JSON.parse(functionCall.arguments);\n  } catch (error) {\n    console.error('Error generating phrase:', error);\n    throw error;\n  }\n};\n\nexport const checkAnswer = async (input, phraseData, questionType) => {\n  try {\n    // Example of sending a request to an AI model\n    const response = await fetch('/api/check-answer', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        input,\n        phraseData,\n        questionType,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    const result = await response.json();\n    return result; // Assuming result contains { isCorrect: boolean, ... }\n  } catch (error) {\n    console.error('Error interacting with AI model:', error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}