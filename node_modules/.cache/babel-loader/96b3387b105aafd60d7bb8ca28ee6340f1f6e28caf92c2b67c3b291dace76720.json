{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/GamePresenter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MagicalQuestionCard from \"./MagicalQuestionCard\";\nimport { motion } from \"framer-motion\";\nimport useSound from 'use-sound';\nimport correctSound from '../assets/sounds/correct.mp3';\nimport wrongSound from '../assets/sounds/wrong.mp3';\nimport confetti from 'canvas-confetti';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CATEGORIES = {\n  SONG: {\n    name: 'Song',\n    points: 1\n  },\n  MOVIE: {\n    name: 'Movie',\n    points: 2\n  },\n  FAMOUS_PERSON: {\n    name: 'Famous Person',\n    points: 3\n  },\n  FICTIONAL_CHARACTER: {\n    name: 'Fictional Character',\n    points: 3\n  },\n  BOOK: {\n    name: 'Book',\n    points: 4\n  },\n  POET: {\n    name: 'Poet',\n    points: 5\n  },\n  QUOTE: {\n    name: 'Quote',\n    points: 6\n  }\n};\nconst GamePresenter = () => {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [yearGuess, setYearGuess] = useState(\"\");\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [playCorrect] = useSound(correctSound);\n  const [playWrong] = useSound(wrongSound);\n  const startGame = () => {\n    setGameStarted(true);\n    // Here we'll add the API call to get the first phrase\n  };\n  const handleCategorySelect = async category => {\n    setLoading(true);\n    setError(null);\n    try {\n      const phraseData = await getPhrase(category);\n      setCurrentPhrase(phraseData);\n      setSelectedCategory(category);\n      setTriggerEffect(prev => prev + 1);\n\n      // Feed the phrase to MagicalQuestionCard\n      setCurrentQuestion(phraseData.phrase);\n    } catch (err) {\n      setError('Failed to fetch phrase. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleYearGuess = e => {\n    setYearGuess(e.target.value);\n  };\n  const submitGuess = async (userAnswer, yearGuess) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await checkAnswer(userAnswer, currentPhrase, selectedCategory);\n      if (result.isCorrect) {\n        playCorrect();\n        confetti({\n          particleCount: 100,\n          spread: 70,\n          origin: {\n            y: 0.6\n          }\n        });\n\n        // Calculate points\n        let points = CATEGORIES[selectedCategory].points;\n        if (parseInt(yearGuess) === currentPhrase.year) {\n          points *= 2; // Double points for correct year\n        }\n        setScore(prev => prev + points);\n\n        // Show success message\n        setShowResult({\n          correct: true,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      } else {\n        playWrong();\n        setShowResult({\n          correct: false,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      }\n    } catch (err) {\n      setError('Failed to check answer. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: !gameStarted ? /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"game-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Legendary Lines Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounds-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Number of Rounds:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"20\",\n          value: numberOfRounds,\n          onChange: e => setNumberOfRounds(parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        className: \"start-btn\",\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Round \", currentIndex + 1, \" of \", numberOfRounds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MagicalQuestionCard, {\n        question: (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.phrase) || \"Select a category to begin\",\n        triggerEffect: triggerEffect,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"categories-grid\",\n        children: Object.entries(CATEGORIES).map(_ref => {\n          let [key, category] = _ref;\n          return /*#__PURE__*/_jsxDEV(motion.button, {\n            whileHover: {\n              scale: 1.05\n            },\n            whileTap: {\n              scale: 0.95\n            },\n            className: \"category-btn \".concat(selectedCategory === key ? 'selected' : ''),\n            onClick: () => handleCategorySelect(key),\n            children: [category.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"points\",\n              children: [\"(\", category.points, \" pts)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), selectedCategory && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0,\n          y: 20\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        className: \"guess-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your answer...\",\n          className: \"answer-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-guess\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Year (optional)\",\n            value: yearGuess,\n            onChange: handleYearGuess,\n            className: \"year-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bonus-text\",\n            children: \"Double points for correct year!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitGuess(),\n          className: \"submit-btn\",\n          children: \"Submit Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), loading && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        className: \"loading-spinner\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this), error && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePresenter, \"yqTTh2XdINVVlWMFGY56DbIXQZY=\", false, function () {\n  return [useSound, useSound];\n});\n_c = GamePresenter;\nexport default GamePresenter;\nvar _c;\n$RefreshReg$(_c, \"GamePresenter\");","map":{"version":3,"names":["React","useState","useEffect","MagicalQuestionCard","motion","useSound","correctSound","wrongSound","confetti","getPhrase","checkAnswer","jsxDEV","_jsxDEV","Fragment","_Fragment","CATEGORIES","SONG","name","points","MOVIE","FAMOUS_PERSON","FICTIONAL_CHARACTER","BOOK","POET","QUOTE","GamePresenter","_s","currentIndex","setCurrentIndex","score","setScore","selectedCategory","setSelectedCategory","numberOfRounds","setNumberOfRounds","gameStarted","setGameStarted","currentPhrase","setCurrentPhrase","yearGuess","setYearGuess","triggerEffect","setTriggerEffect","showResult","setShowResult","loading","setLoading","error","setError","playCorrect","playWrong","startGame","handleCategorySelect","category","phraseData","prev","setCurrentQuestion","phrase","err","handleYearGuess","e","target","value","submitGuess","userAnswer","result","isCorrect","particleCount","spread","origin","y","parseInt","year","correct","message","explanation","similarity","className","children","div","initial","opacity","animate","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onChange","onClick","question","Object","entries","map","_ref","key","button","whileHover","scale","whileTap","concat","placeholder","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/GamePresenter.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MagicalQuestionCard from \"./MagicalQuestionCard\";\nimport { motion } from \"framer-motion\";\nimport useSound from 'use-sound';\nimport correctSound from '../assets/sounds/correct.mp3';\nimport wrongSound from '../assets/sounds/wrong.mp3';\nimport confetti from 'canvas-confetti';\nimport { getPhrase, checkAnswer } from '../services/aiService';\n\nconst CATEGORIES = {\n  SONG: { name: 'Song', points: 1 },\n  MOVIE: { name: 'Movie', points: 2 },\n  FAMOUS_PERSON: { name: 'Famous Person', points: 3 },\n  FICTIONAL_CHARACTER: { name: 'Fictional Character', points: 3 },\n  BOOK: { name: 'Book', points: 4 },\n  POET: { name: 'Poet', points: 5 },\n  QUOTE: { name: 'Quote', points: 6 }\n};\n\nconst GamePresenter = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [yearGuess, setYearGuess] = useState(\"\");\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [playCorrect] = useSound(correctSound);\n  const [playWrong] = useSound(wrongSound);\n\n  const startGame = () => {\n    setGameStarted(true);\n    // Here we'll add the API call to get the first phrase\n  };\n\n  const handleCategorySelect = async (category) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const phraseData = await getPhrase(category);\n      setCurrentPhrase(phraseData);\n      setSelectedCategory(category);\n      setTriggerEffect(prev => prev + 1);\n      \n      // Feed the phrase to MagicalQuestionCard\n      setCurrentQuestion(phraseData.phrase);\n      \n    } catch (err) {\n      setError('Failed to fetch phrase. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleYearGuess = (e) => {\n    setYearGuess(e.target.value);\n  };\n\n  const submitGuess = async (userAnswer, yearGuess) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await checkAnswer(userAnswer, currentPhrase, selectedCategory);\n      \n      if (result.isCorrect) {\n        playCorrect();\n        confetti({\n          particleCount: 100,\n          spread: 70,\n          origin: { y: 0.6 }\n        });\n        \n        // Calculate points\n        let points = CATEGORIES[selectedCategory].points;\n        if (parseInt(yearGuess) === currentPhrase.year) {\n          points *= 2; // Double points for correct year\n        }\n        setScore(prev => prev + points);\n        \n        // Show success message\n        setShowResult({\n          correct: true,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      } else {\n        playWrong();\n        setShowResult({\n          correct: false,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      }\n      \n    } catch (err) {\n      setError('Failed to check answer. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      {!gameStarted ? (\n        <motion.div \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"game-setup\"\n        >\n          <h1>Legendary Lines Game</h1>\n          <div className=\"rounds-selector\">\n            <label>Number of Rounds:</label>\n            <input \n              type=\"number\" \n              min=\"1\" \n              max=\"20\" \n              value={numberOfRounds}\n              onChange={(e) => setNumberOfRounds(parseInt(e.target.value))}\n            />\n          </div>\n          <button onClick={startGame} className=\"start-btn\">\n            Start Game\n          </button>\n        </motion.div>\n      ) : (\n        <>\n          <div className=\"game-header\">\n            <h2>Score: {score}</h2>\n            <h3>Round {currentIndex + 1} of {numberOfRounds}</h3>\n          </div>\n\n          <MagicalQuestionCard \n            question={currentPhrase?.phrase || \"Select a category to begin\"} \n            triggerEffect={triggerEffect}\n            loading={loading}\n          />\n\n          <div className=\"categories-grid\">\n            {Object.entries(CATEGORIES).map(([key, category]) => (\n              <motion.button\n                key={key}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`category-btn ${selectedCategory === key ? 'selected' : ''}`}\n                onClick={() => handleCategorySelect(key)}\n              >\n                {category.name}\n                <span className=\"points\">({category.points} pts)</span>\n              </motion.button>\n            ))}\n          </div>\n\n          {selectedCategory && (\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"guess-section\"\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter your answer...\"\n                className=\"answer-input\"\n              />\n              <div className=\"year-guess\">\n                <input\n                  type=\"number\"\n                  placeholder=\"Year (optional)\"\n                  value={yearGuess}\n                  onChange={handleYearGuess}\n                  className=\"year-input\"\n                />\n                <span className=\"bonus-text\">Double points for correct year!</span>\n              </div>\n              <button \n                onClick={() => submitGuess()} \n                className=\"submit-btn\"\n              >\n                Submit Answer\n              </button>\n            </motion.div>\n          )}\n\n          {/* Show loading state */}\n          {loading && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"loading-spinner\"\n            >\n              Loading...\n            </motion.div>\n          )}\n          \n          {/* Show error state */}\n          {error && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"error-message\"\n            >\n              {error}\n            </motion.div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default GamePresenter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}