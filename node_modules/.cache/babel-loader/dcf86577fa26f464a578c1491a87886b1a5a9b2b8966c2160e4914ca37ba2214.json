{"ast":null,"code":"import _objectSpread from \"/Users/eimis/test-server/react_projects/legendary-lines-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _taggedTemplateLiteral from \"/Users/eimis/test-server/react_projects/legendary-lines-game/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\nvar _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _templateObject,\n  _templateObject2,\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardContainer = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  position: relative;\\n  width: 300px;\\n  height: 200px;\\n\"])));\n_c = CardContainer;\nconst Card = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  background-color: white;\\n  border-radius: 10px;\\n  padding: 20px;\\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\\n  opacity: \", \";\\n  transition: opacity 0.5s ease-in;\\n\"])), props => props.visible === 'true' ? 1 : 0);\n_c2 = Card;\nconst AnimatedAppearance = _ref => {\n  _s();\n  let {\n    children,\n    duration = 2000,\n    particleCount = 1000\n  } = _ref;\n  const canvasRef = useRef(null);\n  const [cardVisible, setCardVisible] = useState(false);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    canvas.width = 300;\n    canvas.height = 200;\n    const particles = Array(particleCount).fill().map(() => ({\n      x: Math.random() * canvas.width,\n      y: Math.random() * canvas.height,\n      size: Math.random() * 3 + 1,\n      speedX: (Math.random() - 0.5) * 3,\n      speedY: (Math.random() - 0.5) * 3\n    }));\n    let animationFrame;\n    const startTime = performance.now();\n    const animate = currentTime => {\n      const progress = (currentTime - startTime) / duration;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const updatedParticles = particles.map(particle => {\n        const targetX = canvas.width / 2;\n        const targetY = canvas.height / 2;\n        const newX = particle.x + (targetX - particle.x) * 0.05;\n        const newY = particle.y + (targetY - particle.y) * 0.05;\n        ctx.fillStyle = \"rgba(240, 240, 240, \".concat(1 - progress, \")\");\n        ctx.beginPath();\n        const particleSize = Math.max(particle.size * (1 - progress), 0);\n        ctx.arc(newX, newY, particleSize, 0, Math.PI * 2);\n        ctx.fill();\n        return _objectSpread(_objectSpread({}, particle), {}, {\n          x: newX,\n          y: newY\n        });\n      });\n      if (progress < 1) {\n        animationFrame = requestAnimationFrame(animate);\n      } else {\n        setCardVisible(true);\n      }\n    };\n    animationFrame = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(animationFrame);\n  }, [duration, particleCount]);\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      visible: cardVisible.toString(),\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimatedAppearance, \"sJDB4x92T0zTy0ZmqNMPU2dLOdM=\");\n_c3 = AnimatedAppearance;\nconst QuestionCard = _ref2 => {\n  let {\n    question,\n    animationDuration,\n    particleCount\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(AnimatedAppearance, {\n    duration: animationDuration,\n    particleCount: particleCount,\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 3\n  }, this);\n};\n_c4 = QuestionCard;\nexport default QuestionCard;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"CardContainer\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"AnimatedAppearance\");\n$RefreshReg$(_c4, \"QuestionCard\");","map":{"version":3,"names":["React","useRef","useEffect","useState","styled","jsxDEV","_jsxDEV","CardContainer","div","_templateObject","_taggedTemplateLiteral","_c","Card","_templateObject2","props","visible","_c2","AnimatedAppearance","_ref","_s","children","duration","particleCount","canvasRef","cardVisible","setCardVisible","canvas","current","ctx","getContext","width","height","particles","Array","fill","map","x","Math","random","y","size","speedX","speedY","animationFrame","startTime","performance","now","animate","currentTime","progress","clearRect","updatedParticles","particle","targetX","targetY","newX","newY","fillStyle","concat","beginPath","particleSize","max","arc","PI","_objectSpread","requestAnimationFrame","cancelAnimationFrame","ref","style","position","top","left","fileName","_jsxFileName","lineNumber","columnNumber","toString","_c3","QuestionCard","_ref2","question","animationDuration","_c4","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst CardContainer = styled.div`\n  position: relative;\n  width: 300px;\n  height: 200px;\n`;\n\nconst Card = styled.div`\n  background-color: white;\n  border-radius: 10px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  opacity: ${props => props.visible === 'true' ? 1 : 0};\n  transition: opacity 0.5s ease-in;\n`;\n\nconst AnimatedAppearance = ({ children, duration = 2000, particleCount = 1000 }) => {\n  const canvasRef = useRef(null);\n  const [cardVisible, setCardVisible] = useState(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    canvas.width = 300;\n    canvas.height = 200;\n\n    const particles = Array(particleCount).fill().map(() => ({\n      x: Math.random() * canvas.width,\n      y: Math.random() * canvas.height,\n      size: Math.random() * 3 + 1,\n      speedX: (Math.random() - 0.5) * 3,\n      speedY: (Math.random() - 0.5) * 3,\n    }));\n\n    let animationFrame;\n    const startTime = performance.now();\n\n    const animate = (currentTime) => {\n      const progress = (currentTime - startTime) / duration;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      const updatedParticles = particles.map((particle) => {\n        const targetX = canvas.width / 2;\n        const targetY = canvas.height / 2;\n\n        const newX = particle.x + (targetX - particle.x) * 0.05;\n        const newY = particle.y + (targetY - particle.y) * 0.05;\n\n        ctx.fillStyle = `rgba(240, 240, 240, ${1 - progress})`;\n        ctx.beginPath();\n        const particleSize = Math.max(particle.size * (1 - progress), 0);\n        ctx.arc(newX, newY, particleSize, 0, Math.PI * 2);\n        ctx.fill();\n\n        return { ...particle, x: newX, y: newY };\n      });\n\n      if (progress < 1) {\n        animationFrame = requestAnimationFrame(animate);\n      } else {\n        setCardVisible(true);\n      }\n    };\n\n    animationFrame = requestAnimationFrame(animate);\n\n    return () => cancelAnimationFrame(animationFrame);\n  }, [duration, particleCount]);\n\n  return (\n    <CardContainer>\n      <canvas ref={canvasRef} style={{ position: 'absolute', top: 0, left: 0 }} />\n      <Card visible={cardVisible.toString()}>{children}</Card>\n    </CardContainer>\n  );\n};\n\nconst QuestionCard = ({ question, animationDuration, particleCount }) => (\n  <AnimatedAppearance duration={animationDuration} particleCount={particleCount}>\n    <h3>{question}</h3>\n  </AnimatedAppearance>\n);\n\nexport default QuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}