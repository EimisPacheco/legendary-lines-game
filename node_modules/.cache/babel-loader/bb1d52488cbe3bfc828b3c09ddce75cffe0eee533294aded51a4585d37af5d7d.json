{"ast":null,"code":"import OpenAI from 'openai';\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY\n});\nconst DIFFICULTY_MODIFIERS = {\n  EASY: {\n    description: \"well-known and popular quotes from the last 30 years\",\n    popularity: \"highly popular\",\n    maxRetries: 3,\n    temperature: 0.5\n  },\n  MEDIUM: {\n    description: \"moderately known quotes from the last 50 years\",\n    popularity: \"moderately known\",\n    maxRetries: 3,\n    temperature: 0.7\n  },\n  HARD: {\n    description: \"obscure or historical quotes from any time period\",\n    popularity: \"less known\",\n    maxRetries: 3,\n    temperature: 0.9\n  }\n};\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst retryWithExponentialBackoff = async function (operation) {\n  let maxRetries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  let baseDelay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n  let lastError;\n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      var _error$response, _error$response2;\n      lastError = error;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 503) {\n        const delay = baseDelay * Math.pow(2, attempt);\n        console.log(\"Attempt \".concat(attempt + 1, \" failed, retrying in \").concat(delay, \"ms...\"));\n        await sleep(delay);\n        continue;\n      }\n      throw error;\n    }\n  }\n  throw lastError;\n};\nexport const getPhrase = async function (category) {\n  let difficulty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'MEDIUM';\n  const difficultyConfig = DIFFICULTY_MODIFIERS[difficulty];\n  const operation = async () => {\n    try {\n      const systemPrompt = \"You are a game master for 'Legendary Lines'. \\n        Generate \".concat(difficultyConfig.popularity, \" content for the \").concat(category, \" category.\\n        Focus on \").concat(difficultyConfig.description, \".\");\n      const prompt = \"Generate a \".concat(difficulty.toLowerCase(), \" difficulty \").concat(category.toLowerCase(), \" quote or phrase.\\n        The response must be in this exact JSON format:\\n        {\\n          \\\"phrase\\\": \\\"the actual quote or phrase\\\",\\n          \\\"source\\\": \\\"where it's from\\\",\\n          \\\"year\\\": YYYY,\\n          \\\"hint\\\": \\\"a subtle hint without giving away the answer\\\",\\n          \\\"difficulty\\\": \\\"\").concat(difficulty, \"\\\",\\n          \\\"category\\\": \\\"\").concat(category, \"\\\"\\n        }\");\n      const completion = await openai.chat.completions.create({\n        messages: [{\n          role: \"system\",\n          content: systemPrompt\n        }, {\n          role: \"user\",\n          content: prompt\n        }],\n        model: \"gpt-4\",\n        temperature: difficultyConfig.temperature\n      });\n      const response = JSON.parse(completion.choices[0].message.content);\n\n      // Validate response format\n      const requiredFields = ['phrase', 'source', 'year', 'hint', 'difficulty', 'category'];\n      for (const field of requiredFields) {\n        if (!response[field]) {\n          throw new Error(\"Invalid API response: missing \".concat(field));\n        }\n      }\n      return response;\n    } catch (error) {\n      if (error.message.includes('Invalid API response')) {\n        throw new Error('Failed to generate valid phrase. Please try again.');\n      }\n      throw error;\n    }\n  };\n  return retryWithExponentialBackoff(operation, difficultyConfig.maxRetries);\n};\nexport const checkAnswer = async (userAnswer, correctAnswer, category) => {\n  const operation = async () => {\n    try {\n      const systemPrompt = \"You are an answer validator for the 'Legendary Lines' game.\";\n      const prompt = \"Compare these answers for a \".concat(category, \" quote:\\n        User's answer: \\\"\").concat(userAnswer, \"\\\"\\n        Correct answer: \\\"\").concat(correctAnswer.source, \"\\\"\\n        Difficulty level: \").concat(correctAnswer.difficulty, \"\\n        \\n        Consider variations in naming and common abbreviations.\\n        For harder difficulty levels, be more lenient with partial matches.\\n        Return a JSON response in this format:\\n        {\\n          \\\"isCorrect\\\": boolean,\\n          \\\"explanation\\\": \\\"brief explanation of why it's correct or incorrect\\\",\\n          \\\"similarity\\\": \\\"percentage of similarity\\\",\\n          \\\"partialCredit\\\": \\\"percentage of points to award for close answers (0-100)\\\"\\n        }\");\n      const completion = await openai.chat.completions.create({\n        messages: [{\n          role: \"system\",\n          content: systemPrompt\n        }, {\n          role: \"user\",\n          content: prompt\n        }],\n        model: \"gpt-4\",\n        temperature: 0.1\n      });\n      return JSON.parse(completion.choices[0].message.content);\n    } catch (error) {\n      throw new Error('Failed to validate answer. Please try again.');\n    }\n  };\n  return retryWithExponentialBackoff(operation);\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","DIFFICULTY_MODIFIERS","EASY","description","popularity","maxRetries","temperature","MEDIUM","HARD","sleep","ms","Promise","resolve","setTimeout","retryWithExponentialBackoff","operation","arguments","length","undefined","baseDelay","lastError","attempt","error","_error$response","_error$response2","response","status","delay","Math","pow","console","log","concat","getPhrase","category","difficulty","difficultyConfig","systemPrompt","prompt","toLowerCase","completion","chat","completions","create","messages","role","content","model","JSON","parse","choices","message","requiredFields","field","Error","includes","checkAnswer","userAnswer","correctAnswer","source"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/services/aiService.js"],"sourcesContent":["import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n});\n\nconst DIFFICULTY_MODIFIERS = {\n  EASY: {\n    description: \"well-known and popular quotes from the last 30 years\",\n    popularity: \"highly popular\",\n    maxRetries: 3,\n    temperature: 0.5\n  },\n  MEDIUM: {\n    description: \"moderately known quotes from the last 50 years\",\n    popularity: \"moderately known\",\n    maxRetries: 3,\n    temperature: 0.7\n  },\n  HARD: {\n    description: \"obscure or historical quotes from any time period\",\n    popularity: \"less known\",\n    maxRetries: 3,\n    temperature: 0.9\n  }\n};\n\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nconst retryWithExponentialBackoff = async (operation, maxRetries = 3, baseDelay = 1000) => {\n  let lastError;\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error;\n      \n      if (error.response?.status === 429 || error.response?.status === 503) {\n        const delay = baseDelay * Math.pow(2, attempt);\n        console.log(`Attempt ${attempt + 1} failed, retrying in ${delay}ms...`);\n        await sleep(delay);\n        continue;\n      }\n      \n      throw error;\n    }\n  }\n  \n  throw lastError;\n};\n\nexport const getPhrase = async (category, difficulty = 'MEDIUM') => {\n  const difficultyConfig = DIFFICULTY_MODIFIERS[difficulty];\n  \n  const operation = async () => {\n    try {\n      const systemPrompt = `You are a game master for 'Legendary Lines'. \n        Generate ${difficultyConfig.popularity} content for the ${category} category.\n        Focus on ${difficultyConfig.description}.`;\n      \n      const prompt = `Generate a ${difficulty.toLowerCase()} difficulty ${category.toLowerCase()} quote or phrase.\n        The response must be in this exact JSON format:\n        {\n          \"phrase\": \"the actual quote or phrase\",\n          \"source\": \"where it's from\",\n          \"year\": YYYY,\n          \"hint\": \"a subtle hint without giving away the answer\",\n          \"difficulty\": \"${difficulty}\",\n          \"category\": \"${category}\"\n        }`;\n\n      const completion = await openai.chat.completions.create({\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: prompt }\n        ],\n        model: \"gpt-4\",\n        temperature: difficultyConfig.temperature,\n      });\n\n      const response = JSON.parse(completion.choices[0].message.content);\n      \n      // Validate response format\n      const requiredFields = ['phrase', 'source', 'year', 'hint', 'difficulty', 'category'];\n      for (const field of requiredFields) {\n        if (!response[field]) {\n          throw new Error(`Invalid API response: missing ${field}`);\n        }\n      }\n\n      return response;\n    } catch (error) {\n      if (error.message.includes('Invalid API response')) {\n        throw new Error('Failed to generate valid phrase. Please try again.');\n      }\n      throw error;\n    }\n  };\n\n  return retryWithExponentialBackoff(\n    operation,\n    difficultyConfig.maxRetries\n  );\n};\n\nexport const checkAnswer = async (userAnswer, correctAnswer, category) => {\n  const operation = async () => {\n    try {\n      const systemPrompt = `You are an answer validator for the 'Legendary Lines' game.`;\n      \n      const prompt = `Compare these answers for a ${category} quote:\n        User's answer: \"${userAnswer}\"\n        Correct answer: \"${correctAnswer.source}\"\n        Difficulty level: ${correctAnswer.difficulty}\n        \n        Consider variations in naming and common abbreviations.\n        For harder difficulty levels, be more lenient with partial matches.\n        Return a JSON response in this format:\n        {\n          \"isCorrect\": boolean,\n          \"explanation\": \"brief explanation of why it's correct or incorrect\",\n          \"similarity\": \"percentage of similarity\",\n          \"partialCredit\": \"percentage of points to award for close answers (0-100)\"\n        }`;\n\n      const completion = await openai.chat.completions.create({\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: prompt }\n        ],\n        model: \"gpt-4\",\n        temperature: 0.1,\n      });\n\n      return JSON.parse(completion.choices[0].message.content);\n    } catch (error) {\n      throw new Error('Failed to validate answer. Please try again.');\n    }\n  };\n\n  return retryWithExponentialBackoff(operation);\n}; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC;AAEF,MAAMC,oBAAoB,GAAG;EAC3BC,IAAI,EAAE;IACJC,WAAW,EAAE,sDAAsD;IACnEC,UAAU,EAAE,gBAAgB;IAC5BC,UAAU,EAAE,CAAC;IACbC,WAAW,EAAE;EACf,CAAC;EACDC,MAAM,EAAE;IACNJ,WAAW,EAAE,gDAAgD;IAC7DC,UAAU,EAAE,kBAAkB;IAC9BC,UAAU,EAAE,CAAC;IACbC,WAAW,EAAE;EACf,CAAC;EACDE,IAAI,EAAE;IACJL,WAAW,EAAE,mDAAmD;IAChEC,UAAU,EAAE,YAAY;IACxBC,UAAU,EAAE,CAAC;IACbC,WAAW,EAAE;EACf;AACF,CAAC;AAED,MAAMG,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAErE,MAAMI,2BAA2B,GAAG,eAAAA,CAAOC,SAAS,EAAuC;EAAA,IAArCV,UAAU,GAAAW,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEG,SAAS,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACpF,IAAII,SAAS;EAEb,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGhB,UAAU,EAAEgB,OAAO,EAAE,EAAE;IACrD,IAAI;MACF,OAAO,MAAMN,SAAS,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,gBAAA;MACdJ,SAAS,GAAGE,KAAK;MAEjB,IAAI,EAAAC,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,IAAI,EAAAF,gBAAA,GAAAF,KAAK,CAACG,QAAQ,cAAAD,gBAAA,uBAAdA,gBAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;QACpE,MAAMC,KAAK,GAAGR,SAAS,GAAGS,IAAI,CAACC,GAAG,CAAC,CAAC,EAAER,OAAO,CAAC;QAC9CS,OAAO,CAACC,GAAG,YAAAC,MAAA,CAAYX,OAAO,GAAG,CAAC,2BAAAW,MAAA,CAAwBL,KAAK,UAAO,CAAC;QACvE,MAAMlB,KAAK,CAACkB,KAAK,CAAC;QAClB;MACF;MAEA,MAAML,KAAK;IACb;EACF;EAEA,MAAMF,SAAS;AACjB,CAAC;AAED,OAAO,MAAMa,SAAS,GAAG,eAAAA,CAAOC,QAAQ,EAA4B;EAAA,IAA1BC,UAAU,GAAAnB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;EAC7D,MAAMoB,gBAAgB,GAAGnC,oBAAoB,CAACkC,UAAU,CAAC;EAEzD,MAAMpB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMsB,YAAY,sEAAAL,MAAA,CACLI,gBAAgB,CAAChC,UAAU,uBAAA4B,MAAA,CAAoBE,QAAQ,mCAAAF,MAAA,CACvDI,gBAAgB,CAACjC,WAAW,MAAG;MAE5C,MAAMmC,MAAM,iBAAAN,MAAA,CAAiBG,UAAU,CAACI,WAAW,CAAC,CAAC,kBAAAP,MAAA,CAAeE,QAAQ,CAACK,WAAW,CAAC,CAAC,8TAAAP,MAAA,CAOrEG,UAAU,qCAAAH,MAAA,CACZE,QAAQ,kBACvB;MAEJ,MAAMM,UAAU,GAAG,MAAM5C,MAAM,CAAC6C,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QACtDC,QAAQ,EAAE,CACR;UAAEC,IAAI,EAAE,QAAQ;UAAEC,OAAO,EAAET;QAAa,CAAC,EACzC;UAAEQ,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAER;QAAO,CAAC,CAClC;QACDS,KAAK,EAAE,OAAO;QACdzC,WAAW,EAAE8B,gBAAgB,CAAC9B;MAChC,CAAC,CAAC;MAEF,MAAMmB,QAAQ,GAAGuB,IAAI,CAACC,KAAK,CAACT,UAAU,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACL,OAAO,CAAC;;MAElE;MACA,MAAMM,cAAc,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,CAAC;MACrF,KAAK,MAAMC,KAAK,IAAID,cAAc,EAAE;QAClC,IAAI,CAAC3B,QAAQ,CAAC4B,KAAK,CAAC,EAAE;UACpB,MAAM,IAAIC,KAAK,kCAAAtB,MAAA,CAAkCqB,KAAK,CAAE,CAAC;QAC3D;MACF;MAEA,OAAO5B,QAAQ;IACjB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACd,IAAIA,KAAK,CAAC6B,OAAO,CAACI,QAAQ,CAAC,sBAAsB,CAAC,EAAE;QAClD,MAAM,IAAID,KAAK,CAAC,oDAAoD,CAAC;MACvE;MACA,MAAMhC,KAAK;IACb;EACF,CAAC;EAED,OAAOR,2BAA2B,CAChCC,SAAS,EACTqB,gBAAgB,CAAC/B,UACnB,CAAC;AACH,CAAC;AAED,OAAO,MAAMmD,WAAW,GAAG,MAAAA,CAAOC,UAAU,EAAEC,aAAa,EAAExB,QAAQ,KAAK;EACxE,MAAMnB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMsB,YAAY,gEAAgE;MAElF,MAAMC,MAAM,kCAAAN,MAAA,CAAkCE,QAAQ,wCAAAF,MAAA,CAClCyB,UAAU,oCAAAzB,MAAA,CACT0B,aAAa,CAACC,MAAM,oCAAA3B,MAAA,CACnB0B,aAAa,CAACvB,UAAU,6eAU1C;MAEJ,MAAMK,UAAU,GAAG,MAAM5C,MAAM,CAAC6C,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QACtDC,QAAQ,EAAE,CACR;UAAEC,IAAI,EAAE,QAAQ;UAAEC,OAAO,EAAET;QAAa,CAAC,EACzC;UAAEQ,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAER;QAAO,CAAC,CAClC;QACDS,KAAK,EAAE,OAAO;QACdzC,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,OAAO0C,IAAI,CAACC,KAAK,CAACT,UAAU,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACL,OAAO,CAAC;IAC1D,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACd,MAAM,IAAIgC,KAAK,CAAC,8CAA8C,CAAC;IACjE;EACF,CAAC;EAED,OAAOxC,2BAA2B,CAACC,SAAS,CAAC;AAC/C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}