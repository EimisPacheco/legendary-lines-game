{"ast":null,"code":"import _objectSpread from \"/Users/eimis/test-server/react_projects/legendary-lines-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport PropTypes from 'prop-types';\nimport \"../styles/MagicalQuestionCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    question = \"Default Question\",\n    triggerEffect\n  } = _ref;\n  const [cardState, setCardState] = useState({\n    isForming: true,\n    // Controls if particles are forming or dissolving\n    isActive: true,\n    // Controls if particles should be visible\n    particleKey: 0 // Forces particle regeneration\n  });\n\n  // Effect for initial load and question changes\n  useEffect(() => {\n    // Initial load\n    if (triggerEffect === 0) {\n      setCardState({\n        isForming: true,\n        isActive: true,\n        particleKey: 0\n      });\n      return;\n    }\n\n    // Question change animation sequence\n    const startDissolve = () => {\n      setCardState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isForming: false\n      }));\n    };\n    const hideParticles = () => {\n      setCardState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n        isActive: false\n      }));\n    };\n    const startNewFormation = () => {\n      setCardState(prev => ({\n        isForming: true,\n        isActive: true,\n        particleKey: prev.particleKey + 1\n      }));\n    };\n\n    // Execute animation sequence\n    startDissolve();\n    const hideTimer = setTimeout(hideParticles, 1500);\n    const formTimer = setTimeout(startNewFormation, 1800);\n    return () => {\n      clearTimeout(hideTimer);\n      clearTimeout(formTimer);\n    };\n  }, [triggerEffect]);\n\n  // Generate particles based on current state\n  const renderParticles = () => {\n    if (!cardState.isActive) return null;\n    const particles = [];\n    const rows = 30;\n    const cols = 60;\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const baseDelay = i / rows * 0.8;\n        particles.push({\n          id: \"p-\".concat(i, \"-\").concat(j, \"-\").concat(cardState.particleKey),\n          x: j / cols * 100,\n          y: i / rows * 100,\n          delay: baseDelay + Math.random() * 0.3\n        });\n      }\n    }\n    return particles.map(particle => /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"particle\",\n      initial: {\n        x: \"\".concat(particle.x, \"%\"),\n        y: cardState.isForming ? \"\".concat(particle.y - 100, \"%\") : \"\".concat(particle.y, \"%\"),\n        opacity: 0\n      },\n      animate: {\n        x: \"\".concat(particle.x, \"%\"),\n        y: \"\".concat(particle.y, \"%\"),\n        opacity: 0.6\n      },\n      exit: {\n        y: cardState.isForming ? \"\".concat(particle.y, \"%\") : \"\".concat(particle.y + 100, \"%\"),\n        opacity: 0\n      },\n      transition: {\n        duration: 1.2,\n        delay: particle.delay,\n        ease: [0.23, 1, 0.32, 1]\n      }\n    }, particle.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"card-content\",\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        exit: {\n          opacity: 0\n        },\n        children: /*#__PURE__*/_jsxDEV(motion.h2, {\n          className: \"question-text\",\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          transition: {\n            delay: 1\n          },\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, \"card-\".concat(triggerEffect), false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"particles-container\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: renderParticles()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"TgBkAShN/X0PxA3GZcqAx+MTWeA=\");\n_c = MagicalQuestionCard;\nMagicalQuestionCard.propTypes = {\n  question: PropTypes.string,\n  triggerEffect: PropTypes.number\n};\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useState","useEffect","motion","AnimatePresence","PropTypes","jsxDEV","_jsxDEV","MagicalQuestionCard","_ref","_s","question","triggerEffect","cardState","setCardState","isForming","isActive","particleKey","startDissolve","prev","_objectSpread","hideParticles","startNewFormation","hideTimer","setTimeout","formTimer","clearTimeout","renderParticles","particles","rows","cols","i","j","baseDelay","push","id","concat","x","y","delay","Math","random","map","particle","div","className","initial","opacity","animate","exit","transition","duration","ease","fileName","_jsxFileName","lineNumber","columnNumber","children","h2","mode","_c","propTypes","string","number","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport PropTypes from 'prop-types';\nimport \"../styles/MagicalQuestionCard.css\";\n\nconst MagicalQuestionCard = ({ question = \"Default Question\", triggerEffect }) => {\n  const [cardState, setCardState] = useState({\n    isForming: true,      // Controls if particles are forming or dissolving\n    isActive: true,       // Controls if particles should be visible\n    particleKey: 0        // Forces particle regeneration\n  });\n\n  // Effect for initial load and question changes\n  useEffect(() => {\n    // Initial load\n    if (triggerEffect === 0) {\n      setCardState({\n        isForming: true,\n        isActive: true,\n        particleKey: 0\n      });\n      return;\n    }\n\n    // Question change animation sequence\n    const startDissolve = () => {\n      setCardState(prev => ({\n        ...prev,\n        isForming: false\n      }));\n    };\n\n    const hideParticles = () => {\n      setCardState(prev => ({\n        ...prev,\n        isActive: false\n      }));\n    };\n\n    const startNewFormation = () => {\n      setCardState(prev => ({\n        isForming: true,\n        isActive: true,\n        particleKey: prev.particleKey + 1\n      }));\n    };\n\n    // Execute animation sequence\n    startDissolve();\n    const hideTimer = setTimeout(hideParticles, 1500);\n    const formTimer = setTimeout(startNewFormation, 1800);\n\n    return () => {\n      clearTimeout(hideTimer);\n      clearTimeout(formTimer);\n    };\n  }, [triggerEffect]);\n\n  // Generate particles based on current state\n  const renderParticles = () => {\n    if (!cardState.isActive) return null;\n\n    const particles = [];\n    const rows = 30;\n    const cols = 60;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const baseDelay = (i / rows) * 0.8;\n        particles.push({\n          id: `p-${i}-${j}-${cardState.particleKey}`,\n          x: (j / cols) * 100,\n          y: (i / rows) * 100,\n          delay: baseDelay + Math.random() * 0.3\n        });\n      }\n    }\n\n    return particles.map(particle => (\n      <motion.div\n        key={particle.id}\n        className=\"particle\"\n        initial={{\n          x: `${particle.x}%`,\n          y: cardState.isForming ? `${particle.y - 100}%` : `${particle.y}%`,\n          opacity: 0\n        }}\n        animate={{\n          x: `${particle.x}%`,\n          y: `${particle.y}%`,\n          opacity: 0.6\n        }}\n        exit={{\n          y: cardState.isForming ? `${particle.y}%` : `${particle.y + 100}%`,\n          opacity: 0\n        }}\n        transition={{\n          duration: 1.2,\n          delay: particle.delay,\n          ease: [0.23, 1, 0.32, 1]\n        }}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"card-container\">\n      <div className=\"card-wrapper\">\n        <motion.div \n          className=\"card-content\"\n          key={`card-${triggerEffect}`}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n        >\n          <motion.h2 \n            className=\"question-text\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          >\n            {question}\n          </motion.h2>\n        </motion.div>\n\n        <div className=\"particles-container\">\n          <AnimatePresence mode=\"wait\">\n            {renderParticles()}\n          </AnimatePresence>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMagicalQuestionCard.propTypes = {\n  question: PropTypes.string,\n  triggerEffect: PropTypes.number\n};\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}