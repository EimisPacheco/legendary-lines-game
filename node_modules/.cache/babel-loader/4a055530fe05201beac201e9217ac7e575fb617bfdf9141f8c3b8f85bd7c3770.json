{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MagicalQuestionCard from './MagicalQuestionCard';\nimport InputModal from './InputModal';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport '../styles/Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CATEGORIES = {\n  SONG: {\n    name: 'Song',\n    points: 1\n  },\n  MOVIE: {\n    name: 'Movie',\n    points: 2\n  },\n  FAMOUS_PERSON: {\n    name: 'Famous Person',\n    points: 3\n  },\n  FICTIONAL_CHARACTER: {\n    name: 'Fictional Character',\n    points: 3\n  },\n  BOOK: {\n    name: 'Book',\n    points: 4\n  },\n  POET: {\n    name: 'Poet',\n    points: 5\n  },\n  QUOTE: {\n    name: 'Quote',\n    points: 6\n  }\n};\nconst Game = _ref => {\n  _s();\n  let {\n    difficulty,\n    numberOfRounds\n  } = _ref;\n  // State declarations\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [round, setRound] = useState(1);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [currentQuestionType, setCurrentQuestionType] = useState('source');\n  const [phraseData, setPhraseData] = useState(null);\n\n  // Add new states for the conversation flow\n  const [playerNickname, setPlayerNickname] = useState('');\n  const [gamePhase, setGamePhase] = useState('greeting');\n  const [aiMessage, setAiMessage] = useState('');\n  useEffect(() => {\n    // Initial greeting\n    setAiMessage(\"👋 Hello, brilliant player! Welcome to 🎭 Legendary Lines Game ❗\\n\" + \"Ready to test your memory and wit? Let's dive into a world of words and wonders!\\n\" + \"🦹‍♀️ Choose an epic alias for your adventure!\");\n    setShowAnswerModal(true);\n  }, []);\n  const handlePlayerInput = async input => {\n    switch (gamePhase) {\n      case 'greeting':\n        setPlayerNickname(input);\n        setGamePhase('playing');\n        setAiMessage(\"Welcome, \".concat(input, \"! \\uD83C\\uDF1F\\nWhat category would you like to play for Round 1?\"));\n        setShowAnswerModal(false);\n        break;\n      case 'playing':\n        if (!phraseData) {\n          // Handle category selection\n          await handleCategorySelect(input.toUpperCase());\n        } else {\n          try {\n            // Get the correct answer based on the current question type\n            const correctAnswer = currentQuestionType === 'creator' ? phraseData.additionalInfo.creator : phraseData[currentQuestionType];\n\n            // Call checkAnswer with the correct parameters\n            const result = await checkAnswer(input, correctAnswer, currentQuestionType);\n            if (result.isCorrect) {\n              // Update score based on the current category and question type\n              const pointsEarned = calculatePoints(selectedCategory, currentQuestionType);\n              setScore(prev => prev + pointsEarned);\n              setStreak(prev => prev + 1);\n            }\n            handleAnswerResult(result);\n          } catch (error) {\n            console.error('Error checking answer:', error);\n            setAiMessage('Sorry, there was an error checking your answer. Please try again.');\n          }\n        }\n        break;\n    }\n  };\n  const handleAnswerResult = result => {\n    if (result.isCorrect) {\n      const feedbackMessage = result.feedback || '🎉 Correct!';\n      if (currentQuestionType === 'source') {\n        setAiMessage(\"\".concat(feedbackMessage, \"\\n\\nWould you like to try guessing the year for double points?\"));\n        setTriggerEffect(prev => prev + 1);\n        setCurrentQuestionType('year');\n      } else if (currentQuestionType === 'year' && (selectedCategory === 'MOVIE' || selectedCategory === 'SONG')) {\n        setAiMessage(\"\".concat(feedbackMessage, \"\\n\\nWant to triple your points by guessing the \").concat(selectedCategory === 'MOVIE' ? 'director' : 'artist', \"?\"));\n        setTriggerEffect(prev => prev + 1);\n        setCurrentQuestionType('creator');\n      } else {\n        setAiMessage(\"\".concat(feedbackMessage));\n        setTimeout(() => handleNextRound(), 2000);\n      }\n    } else {\n      handleIncorrectAnswer(result.feedback);\n    }\n  };\n  const handleCategorySelect = async category => {\n    setSelectedCategory(category);\n    try {\n      const data = await getPhrase(category, difficulty);\n      setPhraseData(data);\n      setAiMessage(\"\\uD83C\\uDFAD Here's your \".concat(category.toLowerCase(), \" phrase:\\n\\n\\\"\").concat(data.phrase, \"\\\"\\n\\n\\uD83E\\uDD14 Can you tell me the source?\"));\n      setTriggerEffect(prev => prev + 1);\n      setCurrentQuestionType('source');\n      setTimeout(() => {\n        setShowAnswerModal(true);\n      }, 1000);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n      setAiMessage('😅 Oops! Had trouble fetching a phrase. Try another category!');\n    }\n  };\n  const getPromptForPhase = (phase, questionType) => {\n    switch (phase) {\n      case 'greeting':\n        return 'Enter your nickname...';\n      case 'playing':\n        switch (questionType) {\n          case 'source':\n            return 'Enter the source...';\n          case 'year':\n            return 'Enter the year...';\n          case 'creator':\n            return selectedCategory === 'MOVIE' ? 'Enter the director...' : 'Enter the artist/band...';\n          default:\n            return 'Enter your answer...';\n        }\n      default:\n        return 'Enter your response...';\n    }\n  };\n  const handleNextRound = () => {\n    if (round < numberOfRounds) {\n      setRound(prev => prev + 1);\n      setSelectedCategory(null);\n      setCurrentQuestionType('source');\n      setPhraseData(null);\n      setCurrentPhrase(null);\n      setAiMessage(\"Alright \".concat(playerNickname, \", let's move to round \").concat(round + 1, \"! Choose your category.\"));\n    } else {\n      // Game Over\n      const finalMessage = score === numberOfRounds * 6 ? // Maximum possible score\n      \"\\uD83D\\uDCAF\\uD83C\\uDF86\\uD83C\\uDFC6 Congratulations!! You are a champion!! Mission Accomplished. Your final score: \".concat(score, \"!\") : \"\\uD83D\\uDE25 Good luck next time! You've shown great effort with a final score of \".concat(score, \".\");\n      setAiMessage(finalMessage);\n      setGamePhase('completed');\n    }\n    setShowAnswerModal(false);\n  };\n  const handleIncorrectAnswer = feedback => {\n    const correctAnswer = currentQuestionType === 'creator' ? phraseData.additionalInfo.creator : phraseData[currentQuestionType];\n    setAiMessage(\"\\uD83D\\uDE41 \".concat(feedback || 'Sorry, that\\'s not correct.', \"\\nThe correct answer was: \").concat(correctAnswer));\n    setTriggerEffect(prev => prev + 1);\n    setScore(prev => Math.max(0, prev - CATEGORIES[selectedCategory].points));\n    setStreak(0);\n    setTimeout(() => {\n      handleNextRound();\n    }, 3000);\n  };\n  const calculatePoints = (category, questionType) => {\n    let points = CATEGORIES[category].points;\n    if (questionType === 'year') points *= 2;\n    if (questionType === 'creator') points *= 3;\n    return points;\n  };\n  function handleInputSubmission(inputValue) {\n    // Ensure inputValue is being processed correctly\n    if (inputValue) {\n      // Logic to send inputValue to the AI\n      console.log(\"My input value is:\", inputValue);\n      handlePlayerInput(inputValue);\n    } else {\n      console.error(\"Input value is empty\");\n    }\n  }\n\n  // JSX Return\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Round: \", round, \"/\", numberOfRounds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Streak: \", streak]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MagicalQuestionCard, {\n      message: aiMessage,\n      triggerEffect: triggerEffect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputModal, {\n      isOpen: showAnswerModal,\n      onSubmit: handleInputSubmission,\n      prompt: getPromptForPhase(gamePhase, currentQuestionType)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Available Categories:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-buttons\",\n        children: Object.entries(CATEGORIES).map(_ref2 => {\n          let [key, value] = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"category-btn \".concat(selectedCategory === key ? 'selected' : ''),\n            onClick: () => handleCategorySelect(key),\n            children: [value.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"points\",\n              children: [\"(\", value.points, \" pts)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"RcSz4j+oePpMMm8BKb/9KXskU2s=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","MagicalQuestionCard","InputModal","getPhrase","checkAnswer","jsxDEV","_jsxDEV","CATEGORIES","SONG","name","points","MOVIE","FAMOUS_PERSON","FICTIONAL_CHARACTER","BOOK","POET","QUOTE","Game","_ref","_s","difficulty","numberOfRounds","currentPhrase","setCurrentPhrase","selectedCategory","setSelectedCategory","score","setScore","streak","setStreak","round","setRound","triggerEffect","setTriggerEffect","showResult","setShowResult","showAnswerModal","setShowAnswerModal","currentQuestionType","setCurrentQuestionType","phraseData","setPhraseData","playerNickname","setPlayerNickname","gamePhase","setGamePhase","aiMessage","setAiMessage","handlePlayerInput","input","concat","handleCategorySelect","toUpperCase","correctAnswer","additionalInfo","creator","result","isCorrect","pointsEarned","calculatePoints","prev","handleAnswerResult","error","console","feedbackMessage","feedback","setTimeout","handleNextRound","handleIncorrectAnswer","category","data","toLowerCase","phrase","getPromptForPhase","phase","questionType","finalMessage","Math","max","handleInputSubmission","inputValue","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","isOpen","onSubmit","prompt","Object","entries","map","_ref2","key","value","onClick","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MagicalQuestionCard from './MagicalQuestionCard';\nimport InputModal from './InputModal';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport '../styles/Game.css';\n\nconst CATEGORIES = {\n  SONG: { name: 'Song', points: 1 },\n  MOVIE: { name: 'Movie', points: 2 },\n  FAMOUS_PERSON: { name: 'Famous Person', points: 3 },\n  FICTIONAL_CHARACTER: { name: 'Fictional Character', points: 3 },\n  BOOK: { name: 'Book', points: 4 },\n  POET: { name: 'Poet', points: 5 },\n  QUOTE: { name: 'Quote', points: 6 }\n};\n\nconst Game = ({ difficulty, numberOfRounds }) => {\n  // State declarations\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [round, setRound] = useState(1);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [currentQuestionType, setCurrentQuestionType] = useState('source');\n  const [phraseData, setPhraseData] = useState(null);\n\n  // Add new states for the conversation flow\n  const [playerNickname, setPlayerNickname] = useState('');\n  const [gamePhase, setGamePhase] = useState('greeting');\n  const [aiMessage, setAiMessage] = useState('');\n\n  useEffect(() => {\n    // Initial greeting\n    setAiMessage(\"👋 Hello, brilliant player! Welcome to 🎭 Legendary Lines Game ❗\\n\" +\n                 \"Ready to test your memory and wit? Let's dive into a world of words and wonders!\\n\" +\n                 \"🦹‍♀️ Choose an epic alias for your adventure!\");\n    setShowAnswerModal(true);\n  }, []);\n\n  const handlePlayerInput = async (input) => {\n    switch(gamePhase) {\n      case 'greeting':\n        setPlayerNickname(input);\n        setGamePhase('playing');\n        setAiMessage(`Welcome, ${input}! 🌟\\nWhat category would you like to play for Round 1?`);\n        setShowAnswerModal(false);\n        break;\n\n      case 'playing':\n        if (!phraseData) {\n          // Handle category selection\n          await handleCategorySelect(input.toUpperCase());\n        } else {\n          try {\n            // Get the correct answer based on the current question type\n            const correctAnswer = currentQuestionType === 'creator' \n              ? phraseData.additionalInfo.creator \n              : phraseData[currentQuestionType];\n\n            // Call checkAnswer with the correct parameters\n            const result = await checkAnswer(input, correctAnswer, currentQuestionType);\n            \n            if (result.isCorrect) {\n              // Update score based on the current category and question type\n              const pointsEarned = calculatePoints(selectedCategory, currentQuestionType);\n              setScore(prev => prev + pointsEarned);\n              setStreak(prev => prev + 1);\n            }\n            \n            handleAnswerResult(result);\n          } catch (error) {\n            console.error('Error checking answer:', error);\n            setAiMessage('Sorry, there was an error checking your answer. Please try again.');\n          }\n        }\n        break;\n    }\n  };\n\n  const handleAnswerResult = (result) => {\n    if (result.isCorrect) {\n      const feedbackMessage = result.feedback || '🎉 Correct!';\n      \n      if (currentQuestionType === 'source') {\n        setAiMessage(`${feedbackMessage}\\n\\nWould you like to try guessing the year for double points?`);\n        setTriggerEffect(prev => prev + 1);\n        setCurrentQuestionType('year');\n      } else if (currentQuestionType === 'year' && \n                 (selectedCategory === 'MOVIE' || selectedCategory === 'SONG')) {\n        setAiMessage(`${feedbackMessage}\\n\\nWant to triple your points by guessing the ${selectedCategory === 'MOVIE' ? 'director' : 'artist'}?`);\n        setTriggerEffect(prev => prev + 1);\n        setCurrentQuestionType('creator');\n      } else {\n        setAiMessage(`${feedbackMessage}`);\n        setTimeout(() => handleNextRound(), 2000);\n      }\n    } else {\n      handleIncorrectAnswer(result.feedback);\n    }\n  };\n\n  const handleCategorySelect = async (category) => {\n    setSelectedCategory(category);\n    try {\n      const data = await getPhrase(category, difficulty);\n      setPhraseData(data);\n      setAiMessage(`🎭 Here's your ${category.toLowerCase()} phrase:\\n\\n\"${data.phrase}\"\\n\\n🤔 Can you tell me the source?`);\n      setTriggerEffect(prev => prev + 1);\n      setCurrentQuestionType('source');\n      setTimeout(() => {\n        setShowAnswerModal(true);\n      }, 1000);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n      setAiMessage('😅 Oops! Had trouble fetching a phrase. Try another category!');\n    }\n  };\n\n  const getPromptForPhase = (phase, questionType) => {\n    switch (phase) {\n      case 'greeting':\n        return 'Enter your nickname...';\n      case 'playing':\n        switch (questionType) {\n          case 'source':\n            return 'Enter the source...';\n          case 'year':\n            return 'Enter the year...';\n          case 'creator':\n            return selectedCategory === 'MOVIE' ? 'Enter the director...' : 'Enter the artist/band...';\n          default:\n            return 'Enter your answer...';\n        }\n      default:\n        return 'Enter your response...';\n    }\n  };\n\n  const handleNextRound = () => {\n    if (round < numberOfRounds) {\n      setRound(prev => prev + 1);\n      setSelectedCategory(null);\n      setCurrentQuestionType('source');\n      setPhraseData(null);\n      setCurrentPhrase(null);\n      setAiMessage(`Alright ${playerNickname}, let's move to round ${round + 1}! Choose your category.`);\n    } else {\n      // Game Over\n      const finalMessage = score === (numberOfRounds * 6) ? // Maximum possible score\n        `💯🎆🏆 Congratulations!! You are a champion!! Mission Accomplished. Your final score: ${score}!` :\n        `😥 Good luck next time! You've shown great effort with a final score of ${score}.`;\n      setAiMessage(finalMessage);\n      setGamePhase('completed');\n    }\n    setShowAnswerModal(false);\n  };\n\n  const handleIncorrectAnswer = (feedback) => {\n    const correctAnswer = currentQuestionType === 'creator' \n      ? phraseData.additionalInfo.creator \n      : phraseData[currentQuestionType];\n      \n    setAiMessage(`🙁 ${feedback || 'Sorry, that\\'s not correct.'}\\nThe correct answer was: ${correctAnswer}`);\n    setTriggerEffect(prev => prev + 1);\n    setScore(prev => Math.max(0, prev - CATEGORIES[selectedCategory].points));\n    setStreak(0);\n    setTimeout(() => {\n      handleNextRound();\n    }, 3000);\n  };\n\n  const calculatePoints = (category, questionType) => {\n    let points = CATEGORIES[category].points;\n    if (questionType === 'year') points *= 2;\n    if (questionType === 'creator') points *= 3;\n    return points;\n  };\n\n  function handleInputSubmission(inputValue) {\n    // Ensure inputValue is being processed correctly\n    if (inputValue) {\n        // Logic to send inputValue to the AI\n        console.log(\"My input value is:\", inputValue);\n        handlePlayerInput(inputValue);\n    } else {\n        console.error(\"Input value is empty\");\n    }\n  }\n\n  // JSX Return\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <div>Round: {round}/{numberOfRounds}</div>\n        <div>Score: {score}</div>\n        <div>Streak: {streak}</div>\n      </div>\n\n      <MagicalQuestionCard \n        message={aiMessage}\n        triggerEffect={triggerEffect}\n      />\n\n      <InputModal \n        isOpen={showAnswerModal}\n        onSubmit={handleInputSubmission}\n        prompt={getPromptForPhase(gamePhase, currentQuestionType)}\n      />\n\n      {gamePhase === 'playing' && (\n        <div className=\"category-selector\">\n          <h3>Available Categories:</h3>\n          <div className=\"category-buttons\">\n            {Object.entries(CATEGORIES).map(([key, value]) => (\n              <button\n                key={key}\n                className={`category-btn ${selectedCategory === key ? 'selected' : ''}`}\n                onClick={() => handleCategorySelect(key)}\n              >\n                {value.name}\n                <span className=\"points\">({value.points} pts)</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}