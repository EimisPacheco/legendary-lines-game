{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MagicalQuestionCard from './MagicalQuestionCard';\nimport InputModal from './InputModal';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport '../styles/Game.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CATEGORIES = {\n  SONG: {\n    name: 'Song',\n    points: 1\n  },\n  MOVIE: {\n    name: 'Movie',\n    points: 2\n  },\n  FAMOUS_PERSON: {\n    name: 'Famous Person',\n    points: 3\n  },\n  FICTIONAL_CHARACTER: {\n    name: 'Fictional Character',\n    points: 3\n  },\n  BOOK: {\n    name: 'Book',\n    points: 4\n  },\n  POET: {\n    name: 'Poet',\n    points: 5\n  },\n  QUOTE: {\n    name: 'Quote',\n    points: 6\n  }\n};\nconst Game = _ref => {\n  _s();\n  let {\n    difficulty,\n    numberOfRounds\n  } = _ref;\n  // State declarations\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [round, setRound] = useState(1);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [currentQuestionType, setCurrentQuestionType] = useState('source');\n  const [phraseData, setPhraseData] = useState(null);\n\n  // Add new states for the conversation flow\n  const [playerNickname, setPlayerNickname] = useState('');\n  const [gamePhase, setGamePhase] = useState('greeting');\n  const [aiMessage, setAiMessage] = useState('');\n\n  // Add new states for bonus question flow\n  const [isAwaitingBonusConfirmation, setIsAwaitingBonusConfirmation] = useState(false);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  useEffect(() => {\n    // Initial greeting\n    setAiMessage(\"👋 Hello, brilliant player! Welcome to 🎭 Legendary Lines Game ❗\\n\" + \"Ready to test your memory and wit? Let's dive into a world of words and wonders!\\n\" + \"🦹‍♀️ Choose an epic alias for your adventure!\");\n    setShowAnswerModal(true);\n  }, []);\n  useEffect(() => {\n    const categoryButtons = document.querySelectorAll('.category-btn');\n    categoryButtons.forEach(button => {\n      createParticles(button);\n    });\n  }, [selectedCategory]);\n  const createParticles = element => {\n    // Clear existing particles\n    const existingWrapper = element.querySelector('.particles-wrapper');\n    if (existingWrapper) {\n      existingWrapper.remove();\n    }\n\n    // Create particles wrapper\n    const particlesWrapper = document.createElement('div');\n    particlesWrapper.className = 'particles-wrapper';\n\n    // Create new particles\n    for (let i = 0; i < 200; i++) {\n      const particle = document.createElement('div');\n      particle.className = 'thanos-particle';\n\n      // Constrain particles to the element's bounds\n      const padding = 20;\n      const x = padding + Math.random() * (element.offsetWidth - 2 * padding);\n      const y = padding + Math.random() * (element.offsetHeight - 2 * padding);\n      const size = Math.random() * 3 + 1;\n      particle.style.width = \"\".concat(size, \"px\");\n      particle.style.height = \"\".concat(size, \"px\");\n\n      // Set final position (where particles will form the message)\n      particle.style.left = \"\".concat(x, \"px\");\n      particle.style.top = \"\".concat(y, \"px\");\n\n      // Set initial position (where particles come from)\n      const tx = (Math.random() - 0.5) * 100;\n      const ty = (Math.random() - 0.5) * 100;\n      particle.style.setProperty('--tx', \"\".concat(tx, \"px\"));\n      particle.style.setProperty('--ty', \"\".concat(ty, \"px\"));\n\n      // First animate IN, then OUT with a delay\n      const inDelay = Math.random() * 0.3; // Shorter delay for in animation\n      const outDelay = 2 + Math.random() * 0.3; // Longer delay before out animation\n\n      particle.style.animation = \"\\n        particleAnimationIn 0.8s ease-out \".concat(inDelay, \"s forwards,\\n        particleAnimationOut 0.8s ease-in \").concat(outDelay, \"s forwards\\n      \");\n      particlesWrapper.appendChild(particle);\n    }\n    element.insertBefore(particlesWrapper, element.firstChild);\n  };\n  const handlePlayerInput = async input => {\n    switch (gamePhase) {\n      case 'greeting':\n        setPlayerNickname(input);\n        setGamePhase('playing');\n        setAiMessage(\"Welcome, \".concat(input, \"! \\uD83C\\uDF1F\\nWhat category would you like to play for Round 1?\"));\n        setShowAnswerModal(false);\n        break;\n      case 'playing':\n        if (!phraseData) {\n          await handleCategorySelect(input.toUpperCase());\n        } else {\n          try {\n            // If waiting for bonus confirmation, handle yes/no response\n            if (isAwaitingBonusConfirmation) {\n              // Create a special entry for the bonus question\n              const bonusQuestion = {\n                type: 'bonus_question',\n                questionType: currentQuestionType,\n                playerAnswer: input\n              };\n              const result = await checkAnswer(input, 'yes',\n              // The \"correct\" answer would be yes for wanting to continue\n              'bonus_confirmation', [...conversationHistory, bonusQuestion]);\n              if (result.isBonusResponse) {\n                if (result.isCorrect) {\n                  setIsAwaitingBonusConfirmation(false);\n                  const promptMessage = currentQuestionType === 'year' ? \"Enter the year...\" : \"Enter the \".concat(selectedCategory === 'MOVIE' ? 'director' : 'artist', \"...\");\n                  setAiMessage(promptMessage);\n                } else {\n                  setAiMessage(\"Alright! You keep your points for this round. \\uD83C\\uDFAF\");\n                  setTimeout(() => handleNextRound(), 2000);\n                }\n              }\n              return;\n            }\n\n            // Normal answer validation flow\n            const correctAnswer = currentQuestionType === 'creator' ? phraseData.additionalInfo.creator : phraseData[currentQuestionType];\n            const result = await checkAnswer(input, correctAnswer, currentQuestionType, conversationHistory);\n            if (result.isCorrect) {\n              const pointsEarned = calculatePoints(selectedCategory, currentQuestionType);\n              setScore(prev => prev + pointsEarned);\n              setStreak(prev => prev + 1);\n            }\n            handleAnswerResult(result);\n          } catch (error) {\n            console.error('Error checking answer:', error);\n            setAiMessage('Sorry, there was an error checking your answer. Please try again.');\n          }\n        }\n        break;\n    }\n  };\n  const handleAnswerResult = result => {\n    if (result.isCorrect) {\n      const feedbackMessage = result.feedback || '🎉 Correct!';\n      if (currentQuestionType === 'source') {\n        setAiMessage(\"\".concat(feedbackMessage, \"\\n\\nWould you like to try guessing the year for double points? (Yes/No)\"));\n        setIsAwaitingBonusConfirmation(true);\n        setTriggerEffect(prev => prev + 1);\n        setCurrentQuestionType('year');\n      } else if (currentQuestionType === 'year' && (selectedCategory === 'MOVIE' || selectedCategory === 'SONG' || selectedCategory === 'BOOK')) {\n        const creatorType = {\n          'MOVIE': 'director',\n          'SONG': 'artist',\n          'BOOK': 'author'\n        }[selectedCategory];\n        setAiMessage(\"\".concat(feedbackMessage, \"\\n\\nWould you like to try guessing the \").concat(creatorType, \" for triple points? (Yes/No)\"));\n        setIsAwaitingBonusConfirmation(true);\n        setTriggerEffect(prev => prev + 1);\n        setCurrentQuestionType('creator');\n      } else {\n        setAiMessage(\"\".concat(feedbackMessage));\n        setTimeout(() => handleNextRound(), 2000);\n      }\n\n      // Update conversation history\n      updateConversationHistory(result.feedback, true);\n    } else {\n      handleIncorrectAnswer(result.feedback);\n      updateConversationHistory(result.feedback, false);\n    }\n  };\n\n  // Update the conversation history function to include more context\n  const updateConversationHistory = (feedback, wasCorrect) => {\n    const newEntry = {\n      round,\n      category: selectedCategory,\n      questionType: currentQuestionType,\n      wasCorrect,\n      feedback,\n      isAwaitingBonus: isAwaitingBonusConfirmation,\n      timestamp: new Date().toISOString()\n    };\n    setConversationHistory(prev => [...prev, newEntry]);\n  };\n  const handleCategorySelect = async category => {\n    // Check if category was already played in conversation history\n    const categoryPlayed = conversationHistory.some(entry => entry.category === category);\n    setSelectedCategory(category);\n    try {\n      const data = await getPhrase(category, difficulty, categoryPlayed ? conversationHistory : undefined);\n      setPhraseData(data);\n      setAiMessage(\"\\uD83C\\uDFAD Here's your \".concat(category.toLowerCase(), \" phrase:\\n\\n\\\"\").concat(data.phrase, \"\\\"\\n\\n\\uD83E\\uDD14 Can you tell me the source?\"));\n      setTriggerEffect(prev => prev + 1);\n      setCurrentQuestionType('source');\n      setIsAwaitingBonusConfirmation(false);\n      setTimeout(() => {\n        setShowAnswerModal(true);\n      }, 1000);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n      setAiMessage('😅 Oops! Had trouble fetching a phrase. Try another category!');\n    }\n  };\n  const getPromptForPhase = (phase, questionType) => {\n    switch (phase) {\n      case 'greeting':\n        return 'Enter your nickname...';\n      case 'playing':\n        switch (questionType) {\n          case 'source':\n            return 'Enter the source...';\n          case 'year':\n            return 'Enter the year...';\n          case 'creator':\n            switch (selectedCategory) {\n              case 'MOVIE':\n                return 'Enter the director...';\n              case 'SONG':\n                return 'Enter the artist/band...';\n              case 'BOOK':\n                return 'Enter the author...';\n              default:\n                return 'Enter the creator...';\n            }\n          default:\n            return 'Enter your answer...';\n        }\n      default:\n        return 'Enter your response...';\n    }\n  };\n  const handleNextRound = () => {\n    if (round < numberOfRounds) {\n      setRound(prev => prev + 1);\n      setSelectedCategory(null);\n      setCurrentQuestionType('source');\n      setPhraseData(null);\n      setCurrentPhrase(null);\n      setAiMessage(\"Alright \".concat(playerNickname, \", let's move to round \").concat(round + 1, \"! Choose your category.\"));\n    } else {\n      // Game Over\n      const finalMessage = score === numberOfRounds * 6 ? // Maximum possible score\n      \"\\uD83D\\uDCAF\\uD83C\\uDF86\\uD83C\\uDFC6 Congratulations!! You are a champion!! Mission Accomplished. Your final score: \".concat(score, \"!\") : \"\\uD83D\\uDE25 Good luck next time! You've shown great effort with a final score of \".concat(score, \".\");\n      setAiMessage(finalMessage);\n      setGamePhase('completed');\n    }\n    setShowAnswerModal(false);\n  };\n  const handleIncorrectAnswer = feedback => {\n    const correctAnswer = currentQuestionType === 'creator' ? phraseData.additionalInfo.creator : phraseData[currentQuestionType];\n    setAiMessage(\"\\uD83D\\uDE41 \".concat(feedback || 'Sorry, that\\'s not correct.', \"\\nThe correct answer was: \").concat(correctAnswer));\n    setTriggerEffect(prev => prev + 1);\n    setScore(prev => Math.max(0, prev - CATEGORIES[selectedCategory].points));\n    setStreak(0);\n    setTimeout(() => {\n      handleNextRound();\n    }, 3000);\n  };\n  const calculatePoints = (category, questionType) => {\n    let points = CATEGORIES[category].points;\n    if (questionType === 'year') points *= 2;\n    if (questionType === 'creator') points *= 3;\n    return points;\n  };\n  function handleInputSubmission(inputValue) {\n    // Ensure inputValue is being processed correctly\n    if (inputValue) {\n      // Logic to send inputValue to the AI\n      console.log(\"My input value is:\", inputValue);\n      handlePlayerInput(inputValue);\n    } else {\n      console.error(\"Input value is empty\");\n    }\n  }\n\n  // JSX Return\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Round: \", round, \"/\", numberOfRounds]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Streak: \", streak]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MagicalQuestionCard, {\n      message: aiMessage,\n      triggerEffect: triggerEffect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputModal, {\n      isOpen: showAnswerModal,\n      onSubmit: handleInputSubmission,\n      prompt: getPromptForPhase(gamePhase, currentQuestionType)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), gamePhase === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Available Categories:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-buttons\",\n        children: Object.entries(CATEGORIES).map(_ref2 => {\n          let [key, value] = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"category-btn \".concat(selectedCategory === key ? 'selected' : ''),\n            onClick: () => handleCategorySelect(key),\n            children: [value.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"points\",\n              children: [\"(\", value.points, \" pts)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"dBn5hwtht/kyd9uAz1cI0ag9TyQ=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","MagicalQuestionCard","InputModal","getPhrase","checkAnswer","jsxDEV","_jsxDEV","CATEGORIES","SONG","name","points","MOVIE","FAMOUS_PERSON","FICTIONAL_CHARACTER","BOOK","POET","QUOTE","Game","_ref","_s","difficulty","numberOfRounds","currentPhrase","setCurrentPhrase","selectedCategory","setSelectedCategory","score","setScore","streak","setStreak","round","setRound","triggerEffect","setTriggerEffect","showResult","setShowResult","showAnswerModal","setShowAnswerModal","currentQuestionType","setCurrentQuestionType","phraseData","setPhraseData","playerNickname","setPlayerNickname","gamePhase","setGamePhase","aiMessage","setAiMessage","isAwaitingBonusConfirmation","setIsAwaitingBonusConfirmation","conversationHistory","setConversationHistory","categoryButtons","document","querySelectorAll","forEach","button","createParticles","element","existingWrapper","querySelector","remove","particlesWrapper","createElement","className","i","particle","padding","x","Math","random","offsetWidth","y","offsetHeight","size","style","width","concat","height","left","top","tx","ty","setProperty","inDelay","outDelay","animation","appendChild","insertBefore","firstChild","handlePlayerInput","input","handleCategorySelect","toUpperCase","bonusQuestion","type","questionType","playerAnswer","result","isBonusResponse","isCorrect","promptMessage","setTimeout","handleNextRound","correctAnswer","additionalInfo","creator","pointsEarned","calculatePoints","prev","handleAnswerResult","error","console","feedbackMessage","feedback","creatorType","updateConversationHistory","handleIncorrectAnswer","wasCorrect","newEntry","category","isAwaitingBonus","timestamp","Date","toISOString","categoryPlayed","some","entry","data","undefined","toLowerCase","phrase","getPromptForPhase","phase","finalMessage","max","handleInputSubmission","inputValue","log","children","fileName","_jsxFileName","lineNumber","columnNumber","message","isOpen","onSubmit","prompt","Object","entries","map","_ref2","key","value","onClick","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MagicalQuestionCard from './MagicalQuestionCard';\nimport InputModal from './InputModal';\nimport { getPhrase, checkAnswer } from '../services/aiService';\nimport '../styles/Game.css';\n\nconst CATEGORIES = {\n  SONG: { name: 'Song', points: 1 },\n  MOVIE: { name: 'Movie', points: 2 },\n  FAMOUS_PERSON: { name: 'Famous Person', points: 3 },\n  FICTIONAL_CHARACTER: { name: 'Fictional Character', points: 3 },\n  BOOK: { name: 'Book', points: 4 },\n  POET: { name: 'Poet', points: 5 },\n  QUOTE: { name: 'Quote', points: 6 }\n};\n\nconst Game = ({ difficulty, numberOfRounds }) => {\n  // State declarations\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [score, setScore] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [round, setRound] = useState(1);\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [showAnswerModal, setShowAnswerModal] = useState(false);\n  const [currentQuestionType, setCurrentQuestionType] = useState('source');\n  const [phraseData, setPhraseData] = useState(null);\n\n  // Add new states for the conversation flow\n  const [playerNickname, setPlayerNickname] = useState('');\n  const [gamePhase, setGamePhase] = useState('greeting');\n  const [aiMessage, setAiMessage] = useState('');\n\n  // Add new states for bonus question flow\n  const [isAwaitingBonusConfirmation, setIsAwaitingBonusConfirmation] = useState(false);\n  const [conversationHistory, setConversationHistory] = useState([]);\n\n  useEffect(() => {\n    // Initial greeting\n    setAiMessage(\"👋 Hello, brilliant player! Welcome to 🎭 Legendary Lines Game ❗\\n\" +\n                 \"Ready to test your memory and wit? Let's dive into a world of words and wonders!\\n\" +\n                 \"🦹‍♀️ Choose an epic alias for your adventure!\");\n    setShowAnswerModal(true);\n  }, []);\n\n  useEffect(() => {\n    const categoryButtons = document.querySelectorAll('.category-btn');\n    categoryButtons.forEach(button => {\n      createParticles(button);\n    });\n  }, [selectedCategory]);\n\n  const createParticles = (element) => {\n    // Clear existing particles\n    const existingWrapper = element.querySelector('.particles-wrapper');\n    if (existingWrapper) {\n      existingWrapper.remove();\n    }\n\n    // Create particles wrapper\n    const particlesWrapper = document.createElement('div');\n    particlesWrapper.className = 'particles-wrapper';\n    \n    // Create new particles\n    for (let i = 0; i < 200; i++) {\n      const particle = document.createElement('div');\n      particle.className = 'thanos-particle';\n      \n      // Constrain particles to the element's bounds\n      const padding = 20;\n      const x = padding + (Math.random() * (element.offsetWidth - 2 * padding));\n      const y = padding + (Math.random() * (element.offsetHeight - 2 * padding));\n      \n      const size = Math.random() * 3 + 1;\n      particle.style.width = `${size}px`;\n      particle.style.height = `${size}px`;\n      \n      // Set final position (where particles will form the message)\n      particle.style.left = `${x}px`;\n      particle.style.top = `${y}px`;\n      \n      // Set initial position (where particles come from)\n      const tx = (Math.random() - 0.5) * 100;\n      const ty = (Math.random() - 0.5) * 100;\n      particle.style.setProperty('--tx', `${tx}px`);\n      particle.style.setProperty('--ty', `${ty}px`);\n      \n      // First animate IN, then OUT with a delay\n      const inDelay = Math.random() * 0.3; // Shorter delay for in animation\n      const outDelay = 2 + Math.random() * 0.3; // Longer delay before out animation\n      \n      particle.style.animation = `\n        particleAnimationIn 0.8s ease-out ${inDelay}s forwards,\n        particleAnimationOut 0.8s ease-in ${outDelay}s forwards\n      `;\n      \n      particlesWrapper.appendChild(particle);\n    }\n\n    element.insertBefore(particlesWrapper, element.firstChild);\n  };\n\n  const handlePlayerInput = async (input) => {\n    switch(gamePhase) {\n      case 'greeting':\n        setPlayerNickname(input);\n        setGamePhase('playing');\n        setAiMessage(`Welcome, ${input}! 🌟\\nWhat category would you like to play for Round 1?`);\n        setShowAnswerModal(false);\n        break;\n\n      case 'playing':\n        if (!phraseData) {\n          await handleCategorySelect(input.toUpperCase());\n        } else {\n          try {\n            // If waiting for bonus confirmation, handle yes/no response\n            if (isAwaitingBonusConfirmation) {\n              // Create a special entry for the bonus question\n              const bonusQuestion = {\n                type: 'bonus_question',\n                questionType: currentQuestionType,\n                playerAnswer: input\n              };\n              \n              const result = await checkAnswer(\n                input, \n                'yes', // The \"correct\" answer would be yes for wanting to continue\n                'bonus_confirmation',\n                [...conversationHistory, bonusQuestion]\n              );\n\n              if (result.isBonusResponse) {\n                if (result.isCorrect) {\n                  setIsAwaitingBonusConfirmation(false);\n                  const promptMessage = currentQuestionType === 'year' \n                    ? \"Enter the year...\" \n                    : `Enter the ${selectedCategory === 'MOVIE' ? 'director' : 'artist'}...`;\n                  setAiMessage(promptMessage);\n                } else {\n                  setAiMessage(`Alright! You keep your points for this round. 🎯`);\n                  setTimeout(() => handleNextRound(), 2000);\n                }\n              }\n              return;\n            }\n\n            // Normal answer validation flow\n            const correctAnswer = currentQuestionType === 'creator' \n              ? phraseData.additionalInfo.creator \n              : phraseData[currentQuestionType];\n\n            const result = await checkAnswer(\n              input, \n              correctAnswer, \n              currentQuestionType,\n              conversationHistory\n            );\n            \n            if (result.isCorrect) {\n              const pointsEarned = calculatePoints(selectedCategory, currentQuestionType);\n              setScore(prev => prev + pointsEarned);\n              setStreak(prev => prev + 1);\n            }\n            \n            handleAnswerResult(result);\n          } catch (error) {\n            console.error('Error checking answer:', error);\n            setAiMessage('Sorry, there was an error checking your answer. Please try again.');\n          }\n        }\n        break;\n    }\n  };\n\n  const handleAnswerResult = (result) => {\n    if (result.isCorrect) {\n      const feedbackMessage = result.feedback || '🎉 Correct!';\n      \n      if (currentQuestionType === 'source') {\n        setAiMessage(`${feedbackMessage}\\n\\nWould you like to try guessing the year for double points? (Yes/No)`);\n        setIsAwaitingBonusConfirmation(true);\n        setTriggerEffect(prev => prev + 1);\n        setCurrentQuestionType('year');\n      } else if (currentQuestionType === 'year' && \n                 (selectedCategory === 'MOVIE' || selectedCategory === 'SONG' || selectedCategory === 'BOOK')) {\n        const creatorType = {\n          'MOVIE': 'director',\n          'SONG': 'artist',\n          'BOOK': 'author'\n        }[selectedCategory];\n        \n        setAiMessage(`${feedbackMessage}\\n\\nWould you like to try guessing the ${creatorType} for triple points? (Yes/No)`);\n        setIsAwaitingBonusConfirmation(true);\n        setTriggerEffect(prev => prev + 1);\n        setCurrentQuestionType('creator');\n      } else {\n        setAiMessage(`${feedbackMessage}`);\n        setTimeout(() => handleNextRound(), 2000);\n      }\n\n      // Update conversation history\n      updateConversationHistory(result.feedback, true);\n    } else {\n      handleIncorrectAnswer(result.feedback);\n      updateConversationHistory(result.feedback, false);\n    }\n  };\n\n  // Update the conversation history function to include more context\n  const updateConversationHistory = (feedback, wasCorrect) => {\n    const newEntry = {\n      round,\n      category: selectedCategory,\n      questionType: currentQuestionType,\n      wasCorrect,\n      feedback,\n      isAwaitingBonus: isAwaitingBonusConfirmation,\n      timestamp: new Date().toISOString()\n    };\n    setConversationHistory(prev => [...prev, newEntry]);\n  };\n\n  const handleCategorySelect = async (category) => {\n    // Check if category was already played in conversation history\n    const categoryPlayed = conversationHistory.some(\n      entry => entry.category === category\n    );\n\n    setSelectedCategory(category);\n    try {\n      const data = await getPhrase(category, difficulty, categoryPlayed ? conversationHistory : undefined);\n      setPhraseData(data);\n      setAiMessage(`🎭 Here's your ${category.toLowerCase()} phrase:\\n\\n\"${data.phrase}\"\\n\\n🤔 Can you tell me the source?`);\n      setTriggerEffect(prev => prev + 1);\n      setCurrentQuestionType('source');\n      setIsAwaitingBonusConfirmation(false);\n      setTimeout(() => {\n        setShowAnswerModal(true);\n      }, 1000);\n    } catch (error) {\n      console.error('Error fetching phrase:', error);\n      setAiMessage('😅 Oops! Had trouble fetching a phrase. Try another category!');\n    }\n  };\n\n  const getPromptForPhase = (phase, questionType) => {\n    switch (phase) {\n      case 'greeting':\n        return 'Enter your nickname...';\n      case 'playing':\n        switch (questionType) {\n          case 'source':\n            return 'Enter the source...';\n          case 'year':\n            return 'Enter the year...';\n          case 'creator':\n            switch (selectedCategory) {\n              case 'MOVIE':\n                return 'Enter the director...';\n              case 'SONG':\n                return 'Enter the artist/band...';\n              case 'BOOK':\n                return 'Enter the author...';\n              default:\n                return 'Enter the creator...';\n            }\n          default:\n            return 'Enter your answer...';\n        }\n      default:\n        return 'Enter your response...';\n    }\n  };\n\n  const handleNextRound = () => {\n    if (round < numberOfRounds) {\n      setRound(prev => prev + 1);\n      setSelectedCategory(null);\n      setCurrentQuestionType('source');\n      setPhraseData(null);\n      setCurrentPhrase(null);\n      setAiMessage(`Alright ${playerNickname}, let's move to round ${round + 1}! Choose your category.`);\n    } else {\n      // Game Over\n      const finalMessage = score === (numberOfRounds * 6) ? // Maximum possible score\n        `💯🎆🏆 Congratulations!! You are a champion!! Mission Accomplished. Your final score: ${score}!` :\n        `😥 Good luck next time! You've shown great effort with a final score of ${score}.`;\n      setAiMessage(finalMessage);\n      setGamePhase('completed');\n    }\n    setShowAnswerModal(false);\n  };\n\n  const handleIncorrectAnswer = (feedback) => {\n    const correctAnswer = currentQuestionType === 'creator' \n      ? phraseData.additionalInfo.creator \n      : phraseData[currentQuestionType];\n      \n    setAiMessage(`🙁 ${feedback || 'Sorry, that\\'s not correct.'}\\nThe correct answer was: ${correctAnswer}`);\n    setTriggerEffect(prev => prev + 1);\n    setScore(prev => Math.max(0, prev - CATEGORIES[selectedCategory].points));\n    setStreak(0);\n    setTimeout(() => {\n      handleNextRound();\n    }, 3000);\n  };\n\n  const calculatePoints = (category, questionType) => {\n    let points = CATEGORIES[category].points;\n    if (questionType === 'year') points *= 2;\n    if (questionType === 'creator') points *= 3;\n    return points;\n  };\n\n  function handleInputSubmission(inputValue) {\n    // Ensure inputValue is being processed correctly\n    if (inputValue) {\n        // Logic to send inputValue to the AI\n        console.log(\"My input value is:\", inputValue);\n        handlePlayerInput(inputValue);\n    } else {\n        console.error(\"Input value is empty\");\n    }\n  }\n\n  // JSX Return\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-header\">\n        <div>Round: {round}/{numberOfRounds}</div>\n        <div>Score: {score}</div>\n        <div>Streak: {streak}</div>\n      </div>\n\n      <MagicalQuestionCard \n        message={aiMessage}\n        triggerEffect={triggerEffect}\n      />\n\n      <InputModal \n        isOpen={showAnswerModal}\n        onSubmit={handleInputSubmission}\n        prompt={getPromptForPhase(gamePhase, currentQuestionType)}\n      />\n\n      {gamePhase === 'playing' && (\n        <div className=\"category-selector\">\n          <h3>Available Categories:</h3>\n          <div className=\"category-buttons\">\n            {Object.entries(CATEGORIES).map(([key, value]) => (\n              <button\n                key={key}\n                className={`category-btn ${selectedCategory === key ? 'selected' : ''}`}\n                onClick={() => handleCategorySelect(key)}\n              >\n                {value.name}\n                <span className=\"points\">({value.points} pts)</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}