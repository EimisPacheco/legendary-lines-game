{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport PropTypes from 'prop-types';\nimport \"../styles/MagicalQuestionCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    question = \"Default Question\",\n    triggerEffect\n  } = _ref;\n  const [particles, setParticles] = useState([]);\n  const [isIntegrating, setIsIntegrating] = useState(true);\n  const generateParticles = useCallback(() => {\n    const particlesArray = [];\n    const cardWidth = 600;\n    const cardHeight = 300;\n\n    // Create a grid of particles that form the card shape\n    const columns = 40;\n    const rows = 20;\n    const cellWidth = cardWidth / columns;\n    const cellHeight = cardHeight / rows;\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < rows; j++) {\n        const x = i * cellWidth;\n        const y = j * cellHeight;\n\n        // Add multiple particles per cell for density\n        const particlesPerCell = 3;\n        for (let k = 0; k < particlesPerCell; k++) {\n          const randomOffsetX = Math.random() * cellWidth;\n          const randomOffsetY = Math.random() * cellHeight;\n          particlesArray.push({\n            id: \"particle-\".concat(i, \"-\").concat(j, \"-\").concat(k),\n            initialX: x + randomOffsetX,\n            initialY: y + randomOffsetY,\n            // Calculate final position based on edge proximity\n            finalX: x + randomOffsetX + (Math.random() - 0.5) * 400,\n            finalY: y + randomOffsetY - Math.random() * 500,\n            // Upward bias\n            size: Math.random() * 3 + 1,\n            // Delay based on position (bottom-up effect)\n            delay: j / rows * 0.5 + Math.random() * 0.5,\n            opacity: Math.random() * 0.6 + 0.4,\n            rotation: Math.random() * 360,\n            // Add wind effect\n            windOffset: Math.random() * 100 - 50\n          });\n        }\n      }\n    }\n    return particlesArray;\n  }, []);\n  useEffect(() => {\n    setIsIntegrating(true);\n    const newParticles = generateParticles();\n    setParticles(newParticles);\n    const timer = setTimeout(() => {\n      setIsIntegrating(false);\n    }, 2000);\n    return () => clearTimeout(timer);\n  }, [triggerEffect, generateParticles]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      mode: \"wait\",\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"card-content\",\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        exit: {\n          opacity: 0\n        },\n        transition: {\n          duration: 0.5\n        },\n        children: [/*#__PURE__*/_jsxDEV(motion.h2, {\n          className: \"question-text\",\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          transition: {\n            delay: 1\n          },\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"particles-wrapper\",\n          children: particles.map(particle => /*#__PURE__*/_jsxDEV(motion.div, {\n            className: \"thanos-particle\",\n            initial: {\n              x: isIntegrating ? particle.finalX : particle.initialX,\n              y: isIntegrating ? particle.finalY : particle.initialY,\n              opacity: 0,\n              scale: 0,\n              rotate: particle.rotation\n            },\n            animate: {\n              x: isIntegrating ? particle.initialX : particle.finalX + particle.windOffset,\n              y: isIntegrating ? particle.initialY : particle.finalY,\n              opacity: isIntegrating ? particle.opacity : 0,\n              scale: isIntegrating ? 1 : 0,\n              rotate: isIntegrating ? 0 : particle.rotation + 360\n            },\n            transition: {\n              duration: 2,\n              delay: particle.delay,\n              ease: [0.23, 1, 0.32, 1]\n            },\n            style: {\n              width: \"\".concat(particle.size, \"px\"),\n              height: \"\".concat(particle.size, \"px\"),\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              transform: \"translate(\".concat(particle.initialX, \"px, \").concat(particle.initialY, \"px)\")\n            }\n          }, particle.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"iy5NZ5YKi+/2hlmK/ITMxkADTS8=\");\n_c = MagicalQuestionCard;\nMagicalQuestionCard.propTypes = {\n  question: PropTypes.string,\n  triggerEffect: PropTypes.number\n};\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","motion","AnimatePresence","PropTypes","jsxDEV","_jsxDEV","MagicalQuestionCard","_ref","_s","question","triggerEffect","particles","setParticles","isIntegrating","setIsIntegrating","generateParticles","particlesArray","cardWidth","cardHeight","columns","rows","cellWidth","cellHeight","i","j","x","y","particlesPerCell","k","randomOffsetX","Math","random","randomOffsetY","push","id","concat","initialX","initialY","finalX","finalY","size","delay","opacity","rotation","windOffset","newParticles","timer","setTimeout","clearTimeout","className","children","mode","div","initial","animate","exit","transition","duration","h2","fileName","_jsxFileName","lineNumber","columnNumber","map","particle","scale","rotate","ease","style","width","height","position","left","top","transform","_c","propTypes","string","number","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport PropTypes from 'prop-types';\nimport \"../styles/MagicalQuestionCard.css\";\n\nconst MagicalQuestionCard = ({ question = \"Default Question\", triggerEffect }) => {\n  const [particles, setParticles] = useState([]);\n  const [isIntegrating, setIsIntegrating] = useState(true);\n\n  const generateParticles = useCallback(() => {\n    const particlesArray = [];\n    const cardWidth = 600;\n    const cardHeight = 300;\n    \n    // Create a grid of particles that form the card shape\n    const columns = 40;\n    const rows = 20;\n    const cellWidth = cardWidth / columns;\n    const cellHeight = cardHeight / rows;\n\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < rows; j++) {\n        const x = i * cellWidth;\n        const y = j * cellHeight;\n        \n        // Add multiple particles per cell for density\n        const particlesPerCell = 3;\n        for (let k = 0; k < particlesPerCell; k++) {\n          const randomOffsetX = Math.random() * cellWidth;\n          const randomOffsetY = Math.random() * cellHeight;\n\n          particlesArray.push({\n            id: `particle-${i}-${j}-${k}`,\n            initialX: x + randomOffsetX,\n            initialY: y + randomOffsetY,\n            // Calculate final position based on edge proximity\n            finalX: x + randomOffsetX + (Math.random() - 0.5) * 400,\n            finalY: y + randomOffsetY - Math.random() * 500, // Upward bias\n            size: Math.random() * 3 + 1,\n            // Delay based on position (bottom-up effect)\n            delay: (j / rows) * 0.5 + Math.random() * 0.5,\n            opacity: Math.random() * 0.6 + 0.4,\n            rotation: Math.random() * 360,\n            // Add wind effect\n            windOffset: Math.random() * 100 - 50\n          });\n        }\n      }\n    }\n    return particlesArray;\n  }, []);\n\n  useEffect(() => {\n    setIsIntegrating(true);\n    const newParticles = generateParticles();\n    setParticles(newParticles);\n\n    const timer = setTimeout(() => {\n      setIsIntegrating(false);\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, [triggerEffect, generateParticles]);\n\n  return (\n    <div className=\"card-container\">\n      <AnimatePresence mode=\"wait\">\n        <motion.div \n          className=\"card-content\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <motion.h2 \n            className=\"question-text\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          >\n            {question}\n          </motion.h2>\n\n          <div className=\"particles-wrapper\">\n            {particles.map((particle) => (\n              <motion.div\n                key={particle.id}\n                className=\"thanos-particle\"\n                initial={{\n                  x: isIntegrating ? particle.finalX : particle.initialX,\n                  y: isIntegrating ? particle.finalY : particle.initialY,\n                  opacity: 0,\n                  scale: 0,\n                  rotate: particle.rotation\n                }}\n                animate={{\n                  x: isIntegrating \n                    ? particle.initialX \n                    : particle.finalX + particle.windOffset,\n                  y: isIntegrating ? particle.initialY : particle.finalY,\n                  opacity: isIntegrating ? particle.opacity : 0,\n                  scale: isIntegrating ? 1 : 0,\n                  rotate: isIntegrating ? 0 : particle.rotation + 360\n                }}\n                transition={{\n                  duration: 2,\n                  delay: particle.delay,\n                  ease: [0.23, 1, 0.32, 1]\n                }}\n                style={{\n                  width: `${particle.size}px`,\n                  height: `${particle.size}px`,\n                  position: 'absolute',\n                  left: 0,\n                  top: 0,\n                  transform: `translate(${particle.initialX}px, ${particle.initialY}px)`\n                }}\n              />\n            ))}\n          </div>\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n};\n\nMagicalQuestionCard.propTypes = {\n  question: PropTypes.string,\n  triggerEffect: PropTypes.number\n};\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}