{"ast":null,"code":"import _objectSpread from \"/Users/eimis/test-server/react_projects/cloud-architecture-game/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/GamePresenter.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport MagicalQuestionCard from \"./MagicalQuestionCard\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport useSound from 'use-sound';\nimport correctSound from '../assets/sounds/correct.mp3';\nimport wrongSound from '../assets/sounds/wrong.mp3';\nimport confetti from 'canvas-confetti';\nimport { getPhrase, checkAnswer, handleAPIError } from '../services/aiService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CATEGORIES = {\n  SONG: {\n    name: 'Song',\n    points: 1\n  },\n  MOVIE: {\n    name: 'Movie',\n    points: 2\n  },\n  FAMOUS_PERSON: {\n    name: 'Famous Person',\n    points: 3\n  },\n  FICTIONAL_CHARACTER: {\n    name: 'Fictional Character',\n    points: 3\n  },\n  BOOK: {\n    name: 'Book',\n    points: 4\n  },\n  POET: {\n    name: 'Poet',\n    points: 5\n  },\n  QUOTE: {\n    name: 'Quote',\n    points: 6\n  }\n};\nconst DIFFICULTIES = {\n  EASY: {\n    color: '#4CAF50',\n    multiplier: 1,\n    particles: {\n      particleCount: 50,\n      spread: 45,\n      colors: ['#4CAF50', '#81C784']\n    },\n    animation: {\n      scale: 1.05,\n      transition: {\n        duration: 0.3\n      }\n    }\n  },\n  MEDIUM: {\n    color: '#FFC107',\n    multiplier: 1.5,\n    particles: {\n      particleCount: 100,\n      spread: 70,\n      colors: ['#FFC107', '#FFD54F']\n    },\n    animation: {\n      scale: 1.1,\n      rotate: [0, 5, -5, 0],\n      transition: {\n        duration: 0.5\n      }\n    }\n  },\n  HARD: {\n    color: '#F44336',\n    multiplier: 2,\n    particles: {\n      particleCount: 150,\n      spread: 100,\n      colors: ['#F44336', '#EF5350'],\n      startVelocity: 45\n    },\n    animation: {\n      scale: 1.15,\n      rotate: [0, 10, -10, 0],\n      transition: {\n        duration: 0.7\n      }\n    }\n  }\n};\n\n// Add achievement effects configuration\nconst ACHIEVEMENT_EFFECTS = {\n  STREAK_3: {\n    particles: {\n      particleCount: 30,\n      spread: 60,\n      colors: ['#FFD700'],\n      shapes: ['star']\n    },\n    sound: 'streak3Sound'\n  },\n  STREAK_5: {\n    particles: {\n      particleCount: 50,\n      spread: 90,\n      colors: ['#FFD700', '#FFA500'],\n      shapes: ['star', 'circle']\n    },\n    sound: 'streak5Sound'\n  },\n  DIFFICULTY_UP: {\n    particles: {\n      particleCount: 100,\n      spread: 120,\n      colors: ['#4CAF50', '#81C784', '#C8E6C9'],\n      shapes: ['star', 'circle', 'square']\n    },\n    sound: 'levelUpSound'\n  }\n};\nconst GamePresenter = () => {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [yearGuess, setYearGuess] = useState(\"\");\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [difficulty, setDifficulty] = useState('MEDIUM');\n  const [retryCount, setRetryCount] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [progressiveScore, setProgressiveScore] = useState(0);\n  const [streakCount, setStreakCount] = useState(0);\n  const [errorRetries, setErrorRetries] = useState({});\n  const [difficultyHistory, setDifficultyHistory] = useState([]);\n  const [showDifficultyChange, setShowDifficultyChange] = useState(false);\n  const [achievements, setAchievements] = useState([]);\n  const [showStats, setShowStats] = useState(false);\n  const [streakHistory, setStreakHistory] = useState([]);\n  const DIFFICULTY_THRESHOLDS = {\n    MEDIUM: {\n      score: 25,\n      streak: 2,\n      consistency: 0.7 // 70% correct answers\n    },\n    HARD: {\n      score: 50,\n      streak: 3,\n      consistency: 0.8 // 80% correct answers\n    }\n  };\n  const [playCorrect] = useSound(correctSound);\n  const [playWrong] = useSound(wrongSound);\n  const startGame = () => {\n    setGameStarted(true);\n    // Here we'll add the API call to get the first phrase\n  };\n  const handleError = async (error, action) => {\n    const errorKey = \"\".concat(action, \"-\").concat(Date.now());\n    const currentRetries = errorRetries[errorKey] || 0;\n    try {\n      const {\n        shouldRetry,\n        delay\n      } = await handleAPIError(error, currentRetries);\n      if (shouldRetry) {\n        setErrorRetries(prev => _objectSpread(_objectSpread({}, prev), {}, {\n          [errorKey]: currentRetries + 1\n        }));\n\n        // Show retry message\n        setErrorMessage(\"Retrying... Attempt \".concat(currentRetries + 1, \"/3\"));\n\n        // Retry the action\n        setTimeout(() => {\n          if (action === 'fetch') {\n            handleCategorySelect(selectedCategory);\n          } else if (action === 'submit') {\n            submitGuess();\n          }\n        }, delay);\n      }\n    } catch (finalError) {\n      setErrorMessage(finalError.message);\n      // Clear retry count for this error\n      setErrorRetries(prev => {\n        const newRetries = _objectSpread({}, prev);\n        delete newRetries[errorKey];\n        return newRetries;\n      });\n    }\n  };\n  const handleCategorySelect = async category => {\n    setLoading(true);\n    setErrorMessage(null);\n    try {\n      const phraseData = await getPhrase(category, difficulty);\n      setCurrentPhrase(phraseData);\n      setSelectedCategory(category);\n      setTriggerEffect(prev => prev + 1);\n      setRetryCount(0); // Reset retry count on success\n    } catch (error) {\n      handleError(error, 'fetch phrase');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleYearGuess = e => {\n    setYearGuess(e.target.value);\n  };\n  const submitGuess = async (userAnswer, yearGuess) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await checkAnswer(userAnswer, currentPhrase, selectedCategory);\n      if (result.isCorrect) {\n        playCorrect();\n        confetti({\n          particleCount: 100,\n          spread: 70,\n          origin: {\n            y: 0.6\n          }\n        });\n\n        // Calculate points\n        let points = CATEGORIES[selectedCategory].points;\n        if (parseInt(yearGuess) === currentPhrase.year) {\n          points *= 2; // Double points for correct year\n        }\n        setScore(prev => prev + points);\n\n        // Show success message\n        setShowResult({\n          correct: true,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      } else {\n        playWrong();\n        setShowResult({\n          correct: false,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      }\n    } catch (err) {\n      setError('Failed to check answer. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const calculatePoints = (result, yearCorrect) => {\n    const basePoints = CATEGORIES[selectedCategory].points;\n    const difficultyMultiplier = DIFFICULTIES[difficulty].multiplier;\n    let points = basePoints * difficultyMultiplier;\n\n    // Add partial credit if available\n    if (result.partialCredit && result.partialCredit > 0) {\n      points *= result.partialCredit / 100;\n    }\n\n    // Double points for correct year\n    if (yearCorrect) points *= 2;\n    return Math.round(points);\n  };\n  const triggerDifficultyEffect = (difficulty, correct) => {\n    if (!correct) return;\n    const config = DIFFICULTIES[difficulty].particles;\n    confetti(_objectSpread(_objectSpread({}, config), {}, {\n      origin: {\n        y: 0.6\n      },\n      gravity: 1.5,\n      scalar: 1.2,\n      ticks: 200\n    }));\n  };\n  const calculateConsistency = () => {\n    const recentAnswers = difficultyHistory.slice(-10);\n    if (recentAnswers.length < 5) return 0;\n    return recentAnswers.filter(x => x).length / recentAnswers.length;\n  };\n  const updateDifficultyBasedOnProgress = () => {\n    const consistency = calculateConsistency();\n    const currentLevel = difficulty;\n    let newLevel = currentLevel;\n    if (streakCount >= DIFFICULTY_THRESHOLDS.HARD.streak && progressiveScore >= DIFFICULTY_THRESHOLDS.HARD.score && consistency >= DIFFICULTY_THRESHOLDS.HARD.consistency) {\n      newLevel = 'HARD';\n    } else if (streakCount >= DIFFICULTY_THRESHOLDS.MEDIUM.streak && progressiveScore >= DIFFICULTY_THRESHOLDS.MEDIUM.score && consistency >= DIFFICULTY_THRESHOLDS.MEDIUM.consistency) {\n      newLevel = 'MEDIUM';\n    }\n    if (newLevel !== currentLevel) {\n      setDifficulty(newLevel);\n      showDifficultyChangeNotification(newLevel);\n    }\n  };\n  const showDifficultyChangeNotification = newLevel => {\n    setShowDifficultyChange(true);\n    setTimeout(() => setShowDifficultyChange(false), 2000);\n  };\n  const handleCorrectAnswer = points => {\n    setStreakCount(prev => prev + 1);\n    setProgressiveScore(prev => prev + points);\n    setDifficultyHistory(prev => [...prev, true]);\n    updateDifficultyBasedOnProgress();\n\n    // Trigger appropriate difficulty effect\n    triggerDifficultyEffect(difficulty, true);\n  };\n  const handleWrongAnswer = () => {\n    setStreakCount(0);\n    setDifficultyHistory(prev => [...prev, false]);\n    setProgressiveScore(prev => Math.max(0, prev - 5));\n  };\n\n  // Add visual feedback for progressive difficulty\n  const renderProgressiveIndicator = () => /*#__PURE__*/_jsxDEV(motion.div, {\n    className: \"progressive-difficulty\",\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"difficulty-fill\",\n        style: {\n          width: \"\".concat(progressiveScore / DIFFICULTY_THRESHOLDS.HARD.score * 100, \"%\"),\n          backgroundColor: DIFFICULTIES[difficulty].color\n        },\n        animate: DIFFICULTIES[difficulty].animation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"streak-counter \".concat(streakCount > 0 ? 'streak-pulse' : ''),\n      animate: {\n        scale: streakCount > 0 ? [1, 1.1, 1] : 1\n      },\n      children: [\"Streak: \", streakCount, streakCount >= 3 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"streak-fire\",\n        children: \"\\uD83D\\uDD25\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-difficulty\",\n      children: [\"Level: \", difficulty]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n  const triggerAchievementEffect = type => {\n    const effect = ACHIEVEMENT_EFFECTS[type];\n    confetti(_objectSpread(_objectSpread({}, effect.particles), {}, {\n      origin: {\n        y: 0.6\n      },\n      gravity: 1.2,\n      scalar: 1.2,\n      ticks: 150\n    }));\n  };\n  const updateStreakHistory = correct => {\n    const newHistory = [...streakHistory, correct];\n    setStreakHistory(newHistory.slice(-20)); // Keep last 20 attempts\n\n    // Check for streak achievements\n    if (streakCount === 3) {\n      triggerAchievementEffect('STREAK_3');\n      addAchievement('3 Streak!');\n    } else if (streakCount === 5) {\n      triggerAchievementEffect('STREAK_5');\n      addAchievement('5 Streak! Amazing!');\n    }\n  };\n  const addAchievement = message => {\n    setAchievements(prev => [...prev, {\n      message,\n      timestamp: Date.now()\n    }]);\n    setTimeout(() => {\n      setAchievements(prev => prev.slice(1));\n    }, 3000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [!gameStarted ? /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      className: \"game-setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Legendary Lines Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"difficulty-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select Difficulty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"difficulty-buttons\",\n          children: Object.keys(DIFFICULTIES).map(diff => /*#__PURE__*/_jsxDEV(motion.button, {\n            whileHover: {\n              scale: 1.05\n            },\n            whileTap: {\n              scale: 0.95\n            },\n            className: \"difficulty-btn \".concat(difficulty === diff ? 'selected' : ''),\n            style: {\n              backgroundColor: DIFFICULTIES[diff].color,\n              opacity: difficulty === diff ? 1 : 0.7\n            },\n            onClick: () => setDifficulty(diff),\n            children: [diff, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"multiplier\",\n              children: [DIFFICULTIES[diff].multiplier, \"x points\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 19\n            }, this)]\n          }, diff, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounds-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Number of Rounds:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"20\",\n          value: numberOfRounds,\n          onChange: e => setNumberOfRounds(parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        className: \"start-btn\",\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Round \", currentIndex + 1, \" of \", numberOfRounds]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MagicalQuestionCard, {\n        question: (currentPhrase === null || currentPhrase === void 0 ? void 0 : currentPhrase.phrase) || \"Select a category to begin\",\n        triggerEffect: triggerEffect,\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"categories-grid\",\n        children: Object.entries(CATEGORIES).map(_ref => {\n          let [key, category] = _ref;\n          return /*#__PURE__*/_jsxDEV(motion.button, {\n            whileHover: {\n              scale: 1.05\n            },\n            whileTap: {\n              scale: 0.95\n            },\n            className: \"category-btn \".concat(selectedCategory === key ? 'selected' : ''),\n            onClick: () => handleCategorySelect(key),\n            children: [category.name, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"points\",\n              children: [\"(\", category.points, \" pts)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 11\n      }, this), selectedCategory && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0,\n          y: 20\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        className: \"guess-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your answer...\",\n          className: \"answer-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"year-guess\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Year (optional)\",\n            value: yearGuess,\n            onChange: handleYearGuess,\n            className: \"year-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bonus-text\",\n            children: \"Double points for correct year!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => submitGuess(),\n          className: \"submit-btn\",\n          children: \"Submit Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 13\n      }, this), loading && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        className: \"loading-spinner\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 13\n      }, this), error && /*#__PURE__*/_jsxDEV(motion.div, {\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: 1\n        },\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), renderProgressiveIndicator(), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: errorMessage && /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"error-message\",\n        initial: {\n          opacity: 0,\n          y: 20\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        exit: {\n          opacity: 0,\n          y: -20\n        },\n        children: [errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setErrorMessage(null),\n          children: \"Dismiss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: showDifficultyChange && /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"difficulty-change\",\n        initial: {\n          scale: 0,\n          opacity: 0\n        },\n        animate: {\n          scale: 1,\n          opacity: 1\n        },\n        exit: {\n          scale: 0,\n          opacity: 0\n        },\n        style: {\n          color: DIFFICULTIES[difficulty].color\n        },\n        children: [\"Difficulty Increased to \", difficulty, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"streak-visualizer\",\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      children: streakHistory.map((correct, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"streak-dot \".concat(correct ? 'correct' : 'incorrect'),\n        initial: {\n          scale: 0\n        },\n        animate: {\n          scale: 1\n        },\n        transition: {\n          delay: index * 0.1\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 546,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: achievements.map((achievement, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"achievement-notification\",\n        initial: {\n          x: 100,\n          opacity: 0\n        },\n        animate: {\n          x: 0,\n          opacity: 1\n        },\n        exit: {\n          x: -100,\n          opacity: 0\n        },\n        style: {\n          top: \"\".concat(120 + index * 70, \"px\")\n        },\n        children: achievement.message\n      }, achievement.timestamp, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: showStats && /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"stats-panel\",\n        initial: {\n          opacity: 0,\n          y: 50\n        },\n        animate: {\n          opacity: 1,\n          y: 0\n        },\n        exit: {\n          opacity: 0,\n          y: 50\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Progress Statistics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Best Streak\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: Math.max(...streakHistory)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Accuracy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: [Math.round(streakHistory.filter(x => x).length / streakHistory.length * 100), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-label\",\n              children: \"Current Level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat-value\",\n              children: difficulty\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-stats\",\n          onClick: () => setShowStats(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePresenter, \"PdrP0GNPWu5sgJAYmQy0SFPBiOY=\", false, function () {\n  return [useSound, useSound];\n});\n_c = GamePresenter;\nexport default GamePresenter;\nvar _c;\n$RefreshReg$(_c, \"GamePresenter\");","map":{"version":3,"names":["React","useState","useEffect","MagicalQuestionCard","motion","AnimatePresence","useSound","correctSound","wrongSound","confetti","getPhrase","checkAnswer","handleAPIError","jsxDEV","_jsxDEV","Fragment","_Fragment","CATEGORIES","SONG","name","points","MOVIE","FAMOUS_PERSON","FICTIONAL_CHARACTER","BOOK","POET","QUOTE","DIFFICULTIES","EASY","color","multiplier","particles","particleCount","spread","colors","animation","scale","transition","duration","MEDIUM","rotate","HARD","startVelocity","ACHIEVEMENT_EFFECTS","STREAK_3","shapes","sound","STREAK_5","DIFFICULTY_UP","GamePresenter","_s","currentIndex","setCurrentIndex","score","setScore","selectedCategory","setSelectedCategory","numberOfRounds","setNumberOfRounds","gameStarted","setGameStarted","currentPhrase","setCurrentPhrase","yearGuess","setYearGuess","triggerEffect","setTriggerEffect","showResult","setShowResult","loading","setLoading","error","setError","difficulty","setDifficulty","retryCount","setRetryCount","errorMessage","setErrorMessage","progressiveScore","setProgressiveScore","streakCount","setStreakCount","errorRetries","setErrorRetries","difficultyHistory","setDifficultyHistory","showDifficultyChange","setShowDifficultyChange","achievements","setAchievements","showStats","setShowStats","streakHistory","setStreakHistory","DIFFICULTY_THRESHOLDS","streak","consistency","playCorrect","playWrong","startGame","handleError","action","errorKey","concat","Date","now","currentRetries","shouldRetry","delay","prev","_objectSpread","setTimeout","handleCategorySelect","submitGuess","finalError","message","newRetries","category","phraseData","handleYearGuess","e","target","value","userAnswer","result","isCorrect","origin","y","parseInt","year","correct","explanation","similarity","err","calculatePoints","yearCorrect","basePoints","difficultyMultiplier","partialCredit","Math","round","triggerDifficultyEffect","config","gravity","scalar","ticks","calculateConsistency","recentAnswers","slice","length","filter","x","updateDifficultyBasedOnProgress","currentLevel","newLevel","showDifficultyChangeNotification","handleCorrectAnswer","handleWrongAnswer","max","renderProgressiveIndicator","div","className","initial","opacity","animate","children","style","width","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","triggerAchievementEffect","type","effect","updateStreakHistory","newHistory","addAchievement","timestamp","Object","keys","map","diff","button","whileHover","whileTap","onClick","min","onChange","question","phrase","entries","_ref","key","placeholder","exit","index","achievement","top","_c","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/cloud-architecture-game/src/components/GamePresenter.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MagicalQuestionCard from \"./MagicalQuestionCard\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport useSound from 'use-sound';\nimport correctSound from '../assets/sounds/correct.mp3';\nimport wrongSound from '../assets/sounds/wrong.mp3';\nimport confetti from 'canvas-confetti';\nimport { getPhrase, checkAnswer, handleAPIError } from '../services/aiService';\n\nconst CATEGORIES = {\n  SONG: { name: 'Song', points: 1 },\n  MOVIE: { name: 'Movie', points: 2 },\n  FAMOUS_PERSON: { name: 'Famous Person', points: 3 },\n  FICTIONAL_CHARACTER: { name: 'Fictional Character', points: 3 },\n  BOOK: { name: 'Book', points: 4 },\n  POET: { name: 'Poet', points: 5 },\n  QUOTE: { name: 'Quote', points: 6 }\n};\n\nconst DIFFICULTIES = {\n  EASY: { \n    color: '#4CAF50', \n    multiplier: 1,\n    particles: {\n      particleCount: 50,\n      spread: 45,\n      colors: ['#4CAF50', '#81C784']\n    },\n    animation: {\n      scale: 1.05,\n      transition: { duration: 0.3 }\n    }\n  },\n  MEDIUM: { \n    color: '#FFC107', \n    multiplier: 1.5,\n    particles: {\n      particleCount: 100,\n      spread: 70,\n      colors: ['#FFC107', '#FFD54F']\n    },\n    animation: {\n      scale: 1.1,\n      rotate: [0, 5, -5, 0],\n      transition: { duration: 0.5 }\n    }\n  },\n  HARD: { \n    color: '#F44336', \n    multiplier: 2,\n    particles: {\n      particleCount: 150,\n      spread: 100,\n      colors: ['#F44336', '#EF5350'],\n      startVelocity: 45\n    },\n    animation: {\n      scale: 1.15,\n      rotate: [0, 10, -10, 0],\n      transition: { duration: 0.7 }\n    }\n  }\n};\n\n// Add achievement effects configuration\nconst ACHIEVEMENT_EFFECTS = {\n  STREAK_3: {\n    particles: {\n      particleCount: 30,\n      spread: 60,\n      colors: ['#FFD700'],\n      shapes: ['star']\n    },\n    sound: 'streak3Sound'\n  },\n  STREAK_5: {\n    particles: {\n      particleCount: 50,\n      spread: 90,\n      colors: ['#FFD700', '#FFA500'],\n      shapes: ['star', 'circle']\n    },\n    sound: 'streak5Sound'\n  },\n  DIFFICULTY_UP: {\n    particles: {\n      particleCount: 100,\n      spread: 120,\n      colors: ['#4CAF50', '#81C784', '#C8E6C9'],\n      shapes: ['star', 'circle', 'square']\n    },\n    sound: 'levelUpSound'\n  }\n};\n\nconst GamePresenter = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const [numberOfRounds, setNumberOfRounds] = useState(5);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [currentPhrase, setCurrentPhrase] = useState(null);\n  const [yearGuess, setYearGuess] = useState(\"\");\n  const [triggerEffect, setTriggerEffect] = useState(0);\n  const [showResult, setShowResult] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [difficulty, setDifficulty] = useState('MEDIUM');\n  const [retryCount, setRetryCount] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [progressiveScore, setProgressiveScore] = useState(0);\n  const [streakCount, setStreakCount] = useState(0);\n  const [errorRetries, setErrorRetries] = useState({});\n  const [difficultyHistory, setDifficultyHistory] = useState([]);\n  const [showDifficultyChange, setShowDifficultyChange] = useState(false);\n  const [achievements, setAchievements] = useState([]);\n  const [showStats, setShowStats] = useState(false);\n  const [streakHistory, setStreakHistory] = useState([]);\n  \n  const DIFFICULTY_THRESHOLDS = {\n    MEDIUM: {\n      score: 25,\n      streak: 2,\n      consistency: 0.7 // 70% correct answers\n    },\n    HARD: {\n      score: 50,\n      streak: 3,\n      consistency: 0.8 // 80% correct answers\n    }\n  };\n\n  const [playCorrect] = useSound(correctSound);\n  const [playWrong] = useSound(wrongSound);\n\n  const startGame = () => {\n    setGameStarted(true);\n    // Here we'll add the API call to get the first phrase\n  };\n\n  const handleError = async (error, action) => {\n    const errorKey = `${action}-${Date.now()}`;\n    const currentRetries = errorRetries[errorKey] || 0;\n    \n    try {\n      const { shouldRetry, delay } = await handleAPIError(error, currentRetries);\n      \n      if (shouldRetry) {\n        setErrorRetries(prev => ({\n          ...prev,\n          [errorKey]: currentRetries + 1\n        }));\n        \n        // Show retry message\n        setErrorMessage(`Retrying... Attempt ${currentRetries + 1}/3`);\n        \n        // Retry the action\n        setTimeout(() => {\n          if (action === 'fetch') {\n            handleCategorySelect(selectedCategory);\n          } else if (action === 'submit') {\n            submitGuess();\n          }\n        }, delay);\n      }\n    } catch (finalError) {\n      setErrorMessage(finalError.message);\n      // Clear retry count for this error\n      setErrorRetries(prev => {\n        const newRetries = { ...prev };\n        delete newRetries[errorKey];\n        return newRetries;\n      });\n    }\n  };\n\n  const handleCategorySelect = async (category) => {\n    setLoading(true);\n    setErrorMessage(null);\n    \n    try {\n      const phraseData = await getPhrase(category, difficulty);\n      setCurrentPhrase(phraseData);\n      setSelectedCategory(category);\n      setTriggerEffect(prev => prev + 1);\n      setRetryCount(0); // Reset retry count on success\n    } catch (error) {\n      handleError(error, 'fetch phrase');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleYearGuess = (e) => {\n    setYearGuess(e.target.value);\n  };\n\n  const submitGuess = async (userAnswer, yearGuess) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await checkAnswer(userAnswer, currentPhrase, selectedCategory);\n      \n      if (result.isCorrect) {\n        playCorrect();\n        confetti({\n          particleCount: 100,\n          spread: 70,\n          origin: { y: 0.6 }\n        });\n        \n        // Calculate points\n        let points = CATEGORIES[selectedCategory].points;\n        if (parseInt(yearGuess) === currentPhrase.year) {\n          points *= 2; // Double points for correct year\n        }\n        setScore(prev => prev + points);\n        \n        // Show success message\n        setShowResult({\n          correct: true,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      } else {\n        playWrong();\n        setShowResult({\n          correct: false,\n          message: result.explanation,\n          similarity: result.similarity\n        });\n      }\n      \n    } catch (err) {\n      setError('Failed to check answer. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculatePoints = (result, yearCorrect) => {\n    const basePoints = CATEGORIES[selectedCategory].points;\n    const difficultyMultiplier = DIFFICULTIES[difficulty].multiplier;\n    let points = basePoints * difficultyMultiplier;\n    \n    // Add partial credit if available\n    if (result.partialCredit && result.partialCredit > 0) {\n      points *= (result.partialCredit / 100);\n    }\n    \n    // Double points for correct year\n    if (yearCorrect) points *= 2;\n    \n    return Math.round(points);\n  };\n\n  const triggerDifficultyEffect = (difficulty, correct) => {\n    if (!correct) return;\n    \n    const config = DIFFICULTIES[difficulty].particles;\n    confetti({\n      ...config,\n      origin: { y: 0.6 },\n      gravity: 1.5,\n      scalar: 1.2,\n      ticks: 200\n    });\n  };\n\n  const calculateConsistency = () => {\n    const recentAnswers = difficultyHistory.slice(-10);\n    if (recentAnswers.length < 5) return 0;\n    return recentAnswers.filter(x => x).length / recentAnswers.length;\n  };\n\n  const updateDifficultyBasedOnProgress = () => {\n    const consistency = calculateConsistency();\n    const currentLevel = difficulty;\n    let newLevel = currentLevel;\n\n    if (streakCount >= DIFFICULTY_THRESHOLDS.HARD.streak && \n        progressiveScore >= DIFFICULTY_THRESHOLDS.HARD.score &&\n        consistency >= DIFFICULTY_THRESHOLDS.HARD.consistency) {\n      newLevel = 'HARD';\n    } else if (streakCount >= DIFFICULTY_THRESHOLDS.MEDIUM.streak &&\n               progressiveScore >= DIFFICULTY_THRESHOLDS.MEDIUM.score &&\n               consistency >= DIFFICULTY_THRESHOLDS.MEDIUM.consistency) {\n      newLevel = 'MEDIUM';\n    }\n\n    if (newLevel !== currentLevel) {\n      setDifficulty(newLevel);\n      showDifficultyChangeNotification(newLevel);\n    }\n  };\n\n  const showDifficultyChangeNotification = (newLevel) => {\n    setShowDifficultyChange(true);\n    setTimeout(() => setShowDifficultyChange(false), 2000);\n  };\n\n  const handleCorrectAnswer = (points) => {\n    setStreakCount(prev => prev + 1);\n    setProgressiveScore(prev => prev + points);\n    setDifficultyHistory(prev => [...prev, true]);\n    updateDifficultyBasedOnProgress();\n    \n    // Trigger appropriate difficulty effect\n    triggerDifficultyEffect(difficulty, true);\n  };\n\n  const handleWrongAnswer = () => {\n    setStreakCount(0);\n    setDifficultyHistory(prev => [...prev, false]);\n    setProgressiveScore(prev => Math.max(0, prev - 5));\n  };\n\n  // Add visual feedback for progressive difficulty\n  const renderProgressiveIndicator = () => (\n    <motion.div \n      className=\"progressive-difficulty\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <div className=\"difficulty-bar\">\n        <div \n          className=\"difficulty-fill\"\n          style={{ \n            width: `${(progressiveScore / DIFFICULTY_THRESHOLDS.HARD.score) * 100}%`,\n            backgroundColor: DIFFICULTIES[difficulty].color\n          }}\n          animate={DIFFICULTIES[difficulty].animation}\n        />\n      </div>\n      <motion.div \n        className={`streak-counter ${streakCount > 0 ? 'streak-pulse' : ''}`}\n        animate={{ scale: streakCount > 0 ? [1, 1.1, 1] : 1 }}\n      >\n        Streak: {streakCount}\n        {streakCount >= 3 && (\n          <span className=\"streak-fire\">🔥</span>\n        )}\n      </motion.div>\n      <div className=\"current-difficulty\">\n        Level: {difficulty}\n      </div>\n    </motion.div>\n  );\n\n  const triggerAchievementEffect = (type) => {\n    const effect = ACHIEVEMENT_EFFECTS[type];\n    confetti({\n      ...effect.particles,\n      origin: { y: 0.6 },\n      gravity: 1.2,\n      scalar: 1.2,\n      ticks: 150\n    });\n  };\n\n  const updateStreakHistory = (correct) => {\n    const newHistory = [...streakHistory, correct];\n    setStreakHistory(newHistory.slice(-20)); // Keep last 20 attempts\n    \n    // Check for streak achievements\n    if (streakCount === 3) {\n      triggerAchievementEffect('STREAK_3');\n      addAchievement('3 Streak!');\n    } else if (streakCount === 5) {\n      triggerAchievementEffect('STREAK_5');\n      addAchievement('5 Streak! Amazing!');\n    }\n  };\n\n  const addAchievement = (message) => {\n    setAchievements(prev => [...prev, { message, timestamp: Date.now() }]);\n    setTimeout(() => {\n      setAchievements(prev => prev.slice(1));\n    }, 3000);\n  };\n\n  return (\n    <div className=\"game-container\">\n      {!gameStarted ? (\n        <motion.div \n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"game-setup\"\n        >\n          <h1>Legendary Lines Game</h1>\n          \n          {/* Difficulty Selection */}\n          <div className=\"difficulty-selector\">\n            <h3>Select Difficulty:</h3>\n            <div className=\"difficulty-buttons\">\n              {Object.keys(DIFFICULTIES).map(diff => (\n                <motion.button\n                  key={diff}\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className={`difficulty-btn ${difficulty === diff ? 'selected' : ''}`}\n                  style={{ \n                    backgroundColor: DIFFICULTIES[diff].color,\n                    opacity: difficulty === diff ? 1 : 0.7 \n                  }}\n                  onClick={() => setDifficulty(diff)}\n                >\n                  {diff}\n                  <span className=\"multiplier\">\n                    {DIFFICULTIES[diff].multiplier}x points\n                  </span>\n                </motion.button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"rounds-selector\">\n            <label>Number of Rounds:</label>\n            <input \n              type=\"number\" \n              min=\"1\" \n              max=\"20\" \n              value={numberOfRounds}\n              onChange={(e) => setNumberOfRounds(parseInt(e.target.value))}\n            />\n          </div>\n          <button onClick={startGame} className=\"start-btn\">\n            Start Game\n          </button>\n        </motion.div>\n      ) : (\n        <>\n          <div className=\"game-header\">\n            <h2>Score: {score}</h2>\n            <h3>Round {currentIndex + 1} of {numberOfRounds}</h3>\n          </div>\n\n          <MagicalQuestionCard \n            question={currentPhrase?.phrase || \"Select a category to begin\"} \n            triggerEffect={triggerEffect}\n            loading={loading}\n          />\n\n          <div className=\"categories-grid\">\n            {Object.entries(CATEGORIES).map(([key, category]) => (\n              <motion.button\n                key={key}\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                className={`category-btn ${selectedCategory === key ? 'selected' : ''}`}\n                onClick={() => handleCategorySelect(key)}\n              >\n                {category.name}\n                <span className=\"points\">({category.points} pts)</span>\n              </motion.button>\n            ))}\n          </div>\n\n          {selectedCategory && (\n            <motion.div \n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"guess-section\"\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter your answer...\"\n                className=\"answer-input\"\n              />\n              <div className=\"year-guess\">\n                <input\n                  type=\"number\"\n                  placeholder=\"Year (optional)\"\n                  value={yearGuess}\n                  onChange={handleYearGuess}\n                  className=\"year-input\"\n                />\n                <span className=\"bonus-text\">Double points for correct year!</span>\n              </div>\n              <button \n                onClick={() => submitGuess()} \n                className=\"submit-btn\"\n              >\n                Submit Answer\n              </button>\n            </motion.div>\n          )}\n\n          {/* Show loading state */}\n          {loading && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"loading-spinner\"\n            >\n              Loading...\n            </motion.div>\n          )}\n          \n          {/* Show error state */}\n          {error && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              className=\"error-message\"\n            >\n              {error}\n            </motion.div>\n          )}\n        </>\n      )}\n\n      {renderProgressiveIndicator()}\n      \n      <AnimatePresence>\n        {errorMessage && (\n          <motion.div\n            className=\"error-message\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n          >\n            {errorMessage}\n            <button onClick={() => setErrorMessage(null)}>\n              Dismiss\n            </button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <AnimatePresence>\n        {showDifficultyChange && (\n          <motion.div\n            className=\"difficulty-change\"\n            initial={{ scale: 0, opacity: 0 }}\n            animate={{ scale: 1, opacity: 1 }}\n            exit={{ scale: 0, opacity: 0 }}\n            style={{ color: DIFFICULTIES[difficulty].color }}\n          >\n            Difficulty Increased to {difficulty}!\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Streak and Progress Visualization */}\n      <motion.div \n        className=\"streak-visualizer\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n      >\n        {streakHistory.map((correct, index) => (\n          <motion.div\n            key={index}\n            className={`streak-dot ${correct ? 'correct' : 'incorrect'}`}\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            transition={{ delay: index * 0.1 }}\n          />\n        ))}\n      </motion.div>\n\n      {/* Achievements Display */}\n      <AnimatePresence>\n        {achievements.map((achievement, index) => (\n          <motion.div\n            key={achievement.timestamp}\n            className=\"achievement-notification\"\n            initial={{ x: 100, opacity: 0 }}\n            animate={{ x: 0, opacity: 1 }}\n            exit={{ x: -100, opacity: 0 }}\n            style={{ top: `${120 + index * 70}px` }}\n          >\n            {achievement.message}\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {/* Stats Panel */}\n      <AnimatePresence>\n        {showStats && (\n          <motion.div\n            className=\"stats-panel\"\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 50 }}\n          >\n            <h3>Progress Statistics</h3>\n            <div className=\"stats-grid\">\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Best Streak</span>\n                <span className=\"stat-value\">{Math.max(...streakHistory)}</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Accuracy</span>\n                <span className=\"stat-value\">\n                  {Math.round((streakHistory.filter(x => x).length / streakHistory.length) * 100)}%\n                </span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Current Level</span>\n                <span className=\"stat-value\">{difficulty}</span>\n              </div>\n            </div>\n            <button \n              className=\"close-stats\"\n              onClick={() => setShowStats(false)}\n            >\n              Close\n            </button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default GamePresenter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}