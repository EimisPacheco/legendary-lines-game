{"ast":null,"code":"var _jsxFileName = \"/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport PropTypes from 'prop-types';\nimport \"../styles/MagicalQuestionCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MagicalQuestionCard = _ref => {\n  _s();\n  let {\n    question = \"Default Question\",\n    triggerEffect\n  } = _ref;\n  const [particles, setParticles] = useState([]);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [isIntegrating, setIsIntegrating] = useState(true);\n  const generateParticles = useCallback(() => {\n    const particlesArray = [];\n    const cardWidth = 600;\n    const cardHeight = 300;\n\n    // Create dense particle grid\n    const columns = 50;\n    const rows = 25;\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < rows; j++) {\n        const baseX = i / columns * 100; // Use percentages\n        const baseY = j / rows * 100;\n\n        // Multiple particles per grid cell\n        const particlesPerCell = 2;\n        for (let k = 0; k < particlesPerCell; k++) {\n          particlesArray.push({\n            id: \"particle-\".concat(i, \"-\").concat(j, \"-\").concat(k),\n            initialX: baseX + (Math.random() - 0.5) * 2,\n            initialY: baseY + (Math.random() - 0.5) * 2,\n            // Scatter pattern\n            finalX: baseX + (Math.random() - 0.5) * 100,\n            finalY: baseY - Math.random() * 150,\n            // Upward bias\n            size: Math.random() * 2 + 1,\n            delay: j / rows * 0.5 + Math.random() * 0.2\n          });\n        }\n      }\n    }\n    return particlesArray;\n  }, []);\n\n  // Handle animation cycle\n  const startAnimation = useCallback(() => {\n    setIsAnimating(true);\n    setIsIntegrating(false);\n\n    // Reset for next integration\n    setTimeout(() => {\n      setParticles(generateParticles());\n      setIsIntegrating(true);\n      setIsAnimating(false);\n    }, 2000);\n  }, [generateParticles]);\n\n  // Initial load\n  useEffect(() => {\n    setParticles(generateParticles());\n  }, [generateParticles]);\n\n  // Handle question changes\n  useEffect(() => {\n    if (triggerEffect > 0) {\n      startAnimation();\n    }\n  }, [triggerEffect, startAnimation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: [/*#__PURE__*/_jsxDEV(motion.div, {\n      className: \"card-content\",\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: isAnimating ? 0 : 1\n      },\n      transition: {\n        duration: 0.5\n      },\n      children: /*#__PURE__*/_jsxDEV(motion.h2, {\n        className: \"question-text\",\n        initial: {\n          opacity: 0\n        },\n        animate: {\n          opacity: isAnimating ? 0 : 1\n        },\n        transition: {\n          delay: isAnimating ? 0 : 0.8\n        },\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"particles-container\",\n      children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n        children: particles.map(particle => /*#__PURE__*/_jsxDEV(motion.div, {\n          className: \"particle\",\n          initial: {\n            x: \"\".concat(isIntegrating ? particle.finalX : particle.initialX, \"%\"),\n            y: \"\".concat(isIntegrating ? particle.finalY : particle.initialY, \"%\"),\n            opacity: 0,\n            scale: 0\n          },\n          animate: {\n            x: \"\".concat(isIntegrating ? particle.initialX : particle.finalX, \"%\"),\n            y: \"\".concat(isIntegrating ? particle.initialY : particle.finalY, \"%\"),\n            opacity: isAnimating ? 0 : 1,\n            scale: isAnimating ? 0 : 1\n          },\n          exit: {\n            opacity: 0,\n            scale: 0\n          },\n          transition: {\n            duration: 1.5,\n            delay: particle.delay,\n            ease: [0.4, 0, 0.2, 1]\n          },\n          style: {\n            position: 'absolute',\n            width: \"\".concat(particle.size, \"px\"),\n            height: \"\".concat(particle.size, \"px\"),\n            backgroundColor: '#4FD1C5',\n            borderRadius: '50%',\n            boxShadow: '0 0 8px rgba(79, 209, 197, 0.6)',\n            mixBlendMode: 'screen'\n          }\n        }, particle.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(MagicalQuestionCard, \"IBWKxI1TicYBiWeWHF8G97irJqo=\");\n_c = MagicalQuestionCard;\nMagicalQuestionCard.propTypes = {\n  question: PropTypes.string,\n  triggerEffect: PropTypes.number\n};\nexport default MagicalQuestionCard;\nvar _c;\n$RefreshReg$(_c, \"MagicalQuestionCard\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","motion","AnimatePresence","PropTypes","jsxDEV","_jsxDEV","MagicalQuestionCard","_ref","_s","question","triggerEffect","particles","setParticles","isAnimating","setIsAnimating","isIntegrating","setIsIntegrating","generateParticles","particlesArray","cardWidth","cardHeight","columns","rows","i","j","baseX","baseY","particlesPerCell","k","push","id","concat","initialX","Math","random","initialY","finalX","finalY","size","delay","startAnimation","setTimeout","className","children","div","initial","opacity","animate","transition","duration","h2","fileName","_jsxFileName","lineNumber","columnNumber","map","particle","x","y","scale","exit","ease","style","position","width","height","backgroundColor","borderRadius","boxShadow","mixBlendMode","_c","propTypes","string","number","$RefreshReg$"],"sources":["/Users/eimis/test-server/react_projects/legendary-lines-game/src/components/MagicalQuestionCard.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport PropTypes from 'prop-types';\nimport \"../styles/MagicalQuestionCard.css\";\n\nconst MagicalQuestionCard = ({ question = \"Default Question\", triggerEffect }) => {\n  const [particles, setParticles] = useState([]);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [isIntegrating, setIsIntegrating] = useState(true);\n\n  const generateParticles = useCallback(() => {\n    const particlesArray = [];\n    const cardWidth = 600;\n    const cardHeight = 300;\n    \n    // Create dense particle grid\n    const columns = 50;\n    const rows = 25;\n\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < rows; j++) {\n        const baseX = (i / columns) * 100; // Use percentages\n        const baseY = (j / rows) * 100;\n        \n        // Multiple particles per grid cell\n        const particlesPerCell = 2;\n        for (let k = 0; k < particlesPerCell; k++) {\n          particlesArray.push({\n            id: `particle-${i}-${j}-${k}`,\n            initialX: baseX + (Math.random() - 0.5) * 2,\n            initialY: baseY + (Math.random() - 0.5) * 2,\n            // Scatter pattern\n            finalX: baseX + (Math.random() - 0.5) * 100,\n            finalY: baseY - Math.random() * 150, // Upward bias\n            size: Math.random() * 2 + 1,\n            delay: (j / rows) * 0.5 + Math.random() * 0.2,\n          });\n        }\n      }\n    }\n    return particlesArray;\n  }, []);\n\n  // Handle animation cycle\n  const startAnimation = useCallback(() => {\n    setIsAnimating(true);\n    setIsIntegrating(false);\n    \n    // Reset for next integration\n    setTimeout(() => {\n      setParticles(generateParticles());\n      setIsIntegrating(true);\n      setIsAnimating(false);\n    }, 2000);\n  }, [generateParticles]);\n\n  // Initial load\n  useEffect(() => {\n    setParticles(generateParticles());\n  }, [generateParticles]);\n\n  // Handle question changes\n  useEffect(() => {\n    if (triggerEffect > 0) {\n      startAnimation();\n    }\n  }, [triggerEffect, startAnimation]);\n\n  return (\n    <div className=\"card-container\">\n      <motion.div \n        className=\"card-content\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: isAnimating ? 0 : 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <motion.h2 \n          className=\"question-text\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: isAnimating ? 0 : 1 }}\n          transition={{ delay: isAnimating ? 0 : 0.8 }}\n        >\n          {question}\n        </motion.h2>\n      </motion.div>\n\n      <div className=\"particles-container\">\n        <AnimatePresence>\n          {particles.map((particle) => (\n            <motion.div\n              key={particle.id}\n              className=\"particle\"\n              initial={{\n                x: `${isIntegrating ? particle.finalX : particle.initialX}%`,\n                y: `${isIntegrating ? particle.finalY : particle.initialY}%`,\n                opacity: 0,\n                scale: 0\n              }}\n              animate={{\n                x: `${isIntegrating ? particle.initialX : particle.finalX}%`,\n                y: `${isIntegrating ? particle.initialY : particle.finalY}%`,\n                opacity: isAnimating ? 0 : 1,\n                scale: isAnimating ? 0 : 1\n              }}\n              exit={{\n                opacity: 0,\n                scale: 0\n              }}\n              transition={{\n                duration: 1.5,\n                delay: particle.delay,\n                ease: [0.4, 0, 0.2, 1]\n              }}\n              style={{\n                position: 'absolute',\n                width: `${particle.size}px`,\n                height: `${particle.size}px`,\n                backgroundColor: '#4FD1C5',\n                borderRadius: '50%',\n                boxShadow: '0 0 8px rgba(79, 209, 197, 0.6)',\n                mixBlendMode: 'screen'\n              }}\n            />\n          ))}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\nMagicalQuestionCard.propTypes = {\n  question: PropTypes.string,\n  triggerEffect: PropTypes.number\n};\n\nexport default MagicalQuestionCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}